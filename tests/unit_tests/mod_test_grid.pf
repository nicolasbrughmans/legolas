module mod_test_grid
  use mod_suite_utils
  use funit
  use mod_grid, only: grid, initialise_grid
  implicit none

  integer :: i
  type(settings_t) :: settings

contains


  @before
  subroutine init_test()
    call reset_globals()
    settings = new_settings()
    call reset_fields(settings, init_fields=.true.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up(settings)
    call settings%delete()
  end subroutine teardown_test


  @test
  subroutine test_cartesian_grid()
    call set_name("cartesian grid")
    call create_test_grid(settings, 51, "Cartesian", 1.0d0, 3.0d0)
    @assertEqual(1.0d0, grid(1), tolerance=TOL)
    @assertEqual(3.0d0, grid(51), tolerance=TOL)
    do i = 1, 50
      @assertLessThan(grid(i), grid(i + 1))
    end do
  end subroutine test_cartesian_grid


  @test
  subroutine test_cylindrical_grid()
    call set_name("cylindrical grid")
    call create_test_grid(settings, 31, "cylindrical", 0.0d0, 1.0d0)
    @assertGreaterThan(grid(1), 2.0d-2)
    @assertEqual(1.0d0, grid(31), tolerance=TOL)
    do i = 1, 30
      @assertLessThan(grid(i), grid(i + 1))
    end do
  end subroutine test_cylindrical_grid


  @test
  subroutine test_cylindrical_grid_force_r0()
    call set_name("cylindrical grid, force r=0")
    settings%grid%force_r0 = .true.
    call logger%set_logging_level(0)
    call create_test_grid(settings, 31, "cylindrical", 0.0d0, 2.0d0)
    @assertEqual(0.0d0, grid(1), tolerance=TOL)
    @assertEqual(2.0d0, grid(31), tolerance=TOL)
    do i = 1, 30
      @assertLessThan(grid(i), grid(i + 1))
    end do
  end subroutine test_cylindrical_grid_force_r0


  @test
  subroutine test_grid_gauss_monotonicity()
    use mod_grid, only: grid_gauss

    call set_name("monotonicity grid_gauss")
    call create_test_grid(settings, 31, "Cartesian")
    do i = 1, settings%grid%get_gauss_gridpts() - 1
      @assertLessThan(grid_gauss(i), grid_gauss(i + 1))
    end do
  end subroutine test_grid_gauss_monotonicity


  @test
  subroutine test_grid_no_geometry_set()
    call set_name("setting grid without geometry")
    call settings%grid%set_geometry("")
    call initialise_grid(settings)
    @assertExceptionRaised("geometry must be set in submodule/parfile")
  end subroutine test_grid_no_geometry_set


  @test
  subroutine test_grid_wrong_geometry_set()
    call set_name("setting grid with unknown geometry")
    call settings%grid%set_geometry("unknown")
    call initialise_grid(settings)
    @assertExceptionRaised("geometry not defined correctly: unknown")
  end subroutine test_grid_wrong_geometry_set


  @test
  subroutine test_custom_grid()
    real(dp)  :: custom_grid(50)

    call set_name("setting custom grid")
    call settings%grid%set_gridpts(50)
    call settings%grid%set_geometry("Cartesian")
    custom_grid = linspace(x0=0.0d0, x1=3.0d0, xvals=50)
    call initialise_grid(settings, custom_grid=custom_grid)
    @assertEqual(0.0d0, grid(1), tolerance=TOL)
    @assertEqual(3.0d0, grid(50), tolerance=TOL)
  end subroutine test_custom_grid


  @test
  subroutine test_custom_grid_wrong_size()
    real(dp)  :: custom_grid(50)
    character(len=125) :: error_msg

    call set_name("setting custom grid, wrong size")
    call settings%grid%set_gridpts(100)
    call settings%grid%set_geometry("Cartesian")
    call initialise_grid(settings, custom_grid=custom_grid)
    error_msg = "custom grid: sizes do not match! Expected 100 points but got 50"
    @assertExceptionRaised(trim(error_msg))
  end subroutine test_custom_grid_wrong_size


  @test
  subroutine test_custom_grid_not_monotone()
    real(dp)  :: custom_grid(50)
    character(len=125) :: error_msg

    call set_name("setting custom grid, not monotone")
    call settings%grid%set_gridpts(50)
    call settings%grid%set_geometry("Cartesian")
    custom_grid = linspace(x0=0.0d0, x1=2.0d0, xvals=50)
    custom_grid(15) = 1.2d0
    call initialise_grid(settings, custom_grid=custom_grid)
    error_msg = ( &
      "custom grid: supplied array is not monotone! &
      &Got x=1.20000000 at index 15 and x=0.61224490 at index 16" &
    )
    @assertExceptionRaised(trim(error_msg))
  end subroutine test_custom_grid_not_monotone


  @test
  subroutine test_scale_factor_Cartesian()
    use mod_grid, only: eps_grid, d_eps_grid_dr

    call set_name("scale factor Cartesian")
    call create_test_grid(settings, 51, "Cartesian", 0.0d0, 2.0d0)
    @assertEqual(1.0d0, eps_grid, tolerance=TOL)
    @assertEqual(0.0d0, d_eps_grid_dr, tolerance=TOL)
  end subroutine test_scale_factor_Cartesian


  @test
  subroutine test_scale_factor_cylindrical()
    use mod_grid, only: grid_gauss, eps_grid, d_eps_grid_dr

    call set_name("scale factor cylindrical")
    call create_test_grid(settings, 51, "cylindrical", 0.0d0, 2.0d0)
    @assertEqual(grid_gauss, eps_grid, tolerance=TOL)
    @assertEqual(1.0d0, d_eps_grid_dr, tolerance=TOL)
  end subroutine test_scale_factor_cylindrical

end module mod_test_grid
