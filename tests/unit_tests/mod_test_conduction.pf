module mod_test_conduction
  use mod_suite_utils
  use funit
  use mod_physical_constants
  use mod_function_utils, only: from_function
  implicit none

  real(dp) :: unit_temperature, unit_density, unit_conduction, unit_numberdensity
  real(dp) :: unit_magneticfield
  real(dp), allocatable :: expected(:), actual(:)
  real(dp), allocatable :: xvals(:)

  type(settings_t) :: settings
  type(background_t) :: background
  type(physics_t) :: physics

contains

  @before
  subroutine init_test()
    settings = get_settings()
    background = new_background()
    physics = new_physics(settings, background)
    call set_default_units(settings)

    unit_temperature = settings%units%get_unit_temperature()
    unit_density = settings%units%get_unit_density()
    unit_conduction = settings%units%get_unit_conduction()
    unit_numberdensity = settings%units%get_unit_numberdensity()
    unit_magneticfield = settings%units%get_unit_magneticfield()

    xvals = linspace(0.1_dp, 1.0_dp, 250)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call settings%delete()
    call background%delete()
    call physics%delete()
    if (allocated(expected)) deallocate(expected)
    if (allocated(actual)) deallocate(actual)
    if (allocated(xvals)) deallocate(xvals)
  end subroutine teardown_test


  function get_actual(func) result(actual_vals)
    procedure(real(dp)), pointer :: func
    real(dp) :: actual_vals(size(xvals))
    integer :: i

    do i = 1, size(xvals)
      actual_vals(i) = func(xvals(i))
    end do
  end function get_actual

  function get_dtcparadr() result(dtcparadr_vals)
    real(dp) :: dtcparadr_vals(size(xvals))
    dtcparadr_vals = physics%conduction%get_dtcparadr(xvals)
  end function get_dtcparadr

  function get_dtcperpdr() result(dtcperpdr_vals)
    real(dp) :: dtcperpdr_vals(size(xvals))
    dtcperpdr_vals = physics%conduction%get_dtcperpdr(xvals)
  end function get_dtcperpdr

  function get_tcprefactor() result(tcprefactor_vals)
    real(dp) :: tcprefactor_vals(size(xvals))
    tcprefactor_vals = physics%conduction%get_tcprefactor(xvals)
  end function get_tcprefactor

  function get_dtcprefactordr() result(dtcprefactordr_vals)
    real(dp) :: dtcprefactordr_vals(size(xvals))
    dtcprefactordr_vals = physics%conduction%get_dtcprefactordr(xvals)
  end function get_dtcprefactordr


  @test
  subroutine test_kappa_para_cte()
    call set_name("thermal conduction (kappa_para cte)")
    call settings%physics%enable_parallel_conduction(fixed_tc_para_value=1.0_dp)
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertTrue(settings%physics%conduction%has_fixed_tc_para())
    @assertEqual(1.0_dp, get_actual(physics%conduction%tcpara), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcparadT), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%tcperp), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcperpdrho), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcperpdB2), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcperpdT), tolerance=TOL)
    @assertEqual(0.0d0, get_dtcperpdr(), tolerance=TOL)
  end subroutine test_kappa_para_cte


  @test
  subroutine test_kappa_para_cte_zero()
    call set_name("thermal conduction (kappa_para cte but zero)")
    call settings%physics%enable_parallel_conduction(fixed_tc_para_value=0.0_dp)
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_fixed_tc_para())
  end subroutine test_kappa_para_cte_zero


  @test
  subroutine test_kappa_perp_cte()
    call set_name("thermal conduction (kappa_perp cte)")
    call settings%physics%enable_perpendicular_conduction(fixed_tc_perp_value=1.0_dp)
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertEqual(1.0_dp, get_actual(physics%conduction%tcperp), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%tcpara), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcparadT), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcperpdrho), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcperpdB2), tolerance=TOL)
    @assertEqual(0.0d0, get_actual(physics%conduction%dtcparadT), tolerance=TOL)
    @assertEqual(0.0d0, get_dtcperpdr(), tolerance=TOL)
  end subroutine test_kappa_perp_cte


  @test
  subroutine test_kappa_perp_cte_zero()
    call set_name("thermal conduction (kappa_perp cte but zero)")
    call settings%physics%enable_perpendicular_conduction(fixed_tc_perp_value=0.0_dp)
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_fixed_tc_perp())
  end subroutine test_kappa_perp_cte_zero


  @test
  subroutine test_kappa_para()
    call set_name("thermal conduction (kappa_para)")
    call background%set_temperature_funcs(T0_func=T0)
    call settings%physics%enable_parallel_conduction()
    expected = ( &
      tc_pf_kappa_para * (xvals * unit_temperature) ** 2.5d0 / coulomb_log &
    )
    actual = get_actual(physics%conduction%tcpara) * unit_conduction
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertTrue(settings%physics%conduction%has_parallel_conduction())
    @assertFalse(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    ! ! expected & actual are few orders in magnitude so 1e-6 is enough
    @assertEqual(0.0d0, abs(expected - actual), tolerance=1.0d-6)

    contains

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = x
    end function T0
  end subroutine test_kappa_para


  @test
  subroutine test_kappa_para_dT()
    call set_name("thermal conduction (kappa_para dT)")
    call background%set_temperature_funcs(T0_func=T0)
    call settings%physics%enable_parallel_conduction()
    expected = ( &
      tc_pf_kappa_para &
      * 2.5d0 &
      * (2.0d0 * xvals * unit_temperature) ** 1.5d0 &
      / coulomb_log &
    )
    actual = ( &
      get_actual(physics%conduction%dtcparadT) * (unit_conduction / unit_temperature) &
    )
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertTrue(settings%physics%conduction%has_parallel_conduction())
    @assertFalse(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=TOL)

    contains

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = 2.0d0 * x
    end function T0
  end subroutine test_kappa_para_dT


  @test
  subroutine test_kappa_perp()
    call set_name("thermal conduction (kappa_perp)")
    call background%set_density_funcs(rho0_func=rho0, drho0_func=drho0)
    call background%set_temperature_funcs(T0_func=T0)
    call background%set_magnetic_2_funcs(B02_func=B02, dB02_func=dB02)
    call settings%physics%enable_perpendicular_conduction()
    expected = ( &
      tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (3.0d0 * xvals * unit_numberdensity) ** 2 &
      / ( &
        (0.5d0 * xvals**2 * unit_magneticfield) ** 2 &
        * sqrt(sqrt(xvals) * unit_temperature) &
      ) &
    )
    actual = get_actual(physics%conduction%tcperp) * unit_conduction
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_parallel_conduction())
    @assertTrue(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=1.0d-6)

    contains

    real(dp) function rho0(x)
      real(dp), intent(in) :: x
      rho0 = 3.0d0 * x
    end function rho0

    real(dp) function drho0()
      drho0 = 3.0d0
    end function drho0

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = sqrt(x)
    end function T0

    real(dp) function dT0(x)
      real(dp), intent(in) :: x
      dT0 = 0.5d0 / sqrt(x)
    end function dT0

    real(dp) function B02(x)
      real(dp), intent(in) :: x
      B02 = 0.5d0 * x**2
    end function B02

    real(dp) function dB02(x)
      real(dp), intent(in) :: x
      dB02 = x
    end function dB02
  end subroutine test_kappa_perp


  @test
  subroutine test_kappa_perp_drho()
    call set_name("thermal conduction (kappa_perp drho)")
    call background%set_density_funcs(rho0_func=rho0, drho0_func=drho0)
    call background%set_temperature_funcs(T0_func=T0)
    call background%set_magnetic_2_funcs(B02_func=B02, dB02_func=dB02)
    call settings%physics%enable_perpendicular_conduction()
    expected = ( &
      2.0d0 &
      * tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (5.0d0 * xvals * unit_numberdensity) &
      / ( &
        (xvals**2 * unit_magneticfield) ** 2 &
        * sqrt(0.2d0 * sqrt(xvals) * unit_temperature) &
      ) &
    )
    actual = get_actual( &
      physics%conduction%dtcperpdrho &
    ) * unit_conduction / unit_numberdensity
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_parallel_conduction())
    @assertTrue(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=TOL)

    contains

    real(dp) function rho0(x)
      real(dp), intent(in) :: x
      rho0 = 5.0d0 * x
    end function rho0

    real(dp) function drho0()
      drho0 = 5.0d0
    end function drho0

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = 0.2d0 * sqrt(x)
    end function T0

    real(dp) function dT0(x)
      real(dp), intent(in) :: x
      dT0 = 0.1d0 / sqrt(x)
    end function dT0

    real(dp) function B02(x)
      real(dp), intent(in) :: x
      B02 = x**2
    end function B02

    real(dp) function dB02(x)
      real(dp), intent(in) :: x
      dB02 = 2.0d0 * x
    end function dB02
  end subroutine test_kappa_perp_drho


  @test
  subroutine test_kappa_perp_dT()
    call set_name("thermal conduction (kappa_perp dT)")
    call background%set_density_funcs(rho0_func=rho0, drho0_func=drho0)
    call background%set_temperature_funcs(T0_func=T0)
    call background%set_magnetic_2_funcs(B02_func=B02, dB02_func=dB02)
    call settings%physics%enable_perpendicular_conduction()
    expected = ( &
      -0.5d0 &
      * tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (xvals**2 * unit_numberdensity) ** 2 &
      / ( &
        (0.25d0 * xvals * unit_magneticfield) ** 2 &
        * (5.0d0 * xvals**2 * unit_temperature) ** 1.5d0 &
      ) &
    )
    actual = ( &
      get_actual(physics%conduction%dtcperpdT) * unit_conduction / unit_temperature &
    )
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_parallel_conduction())
    @assertTrue(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=TOL)

    contains

    real(dp) function rho0(x)
      real(dp), intent(in) :: x
      rho0 = x**2
    end function rho0

    real(dp) function drho0(x)
      real(dp), intent(in) :: x
      drho0 = 2.0d0 * x
    end function drho0

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = 5.0d0 * x**2
    end function T0

    real(dp) function dT0(x)
      real(dp), intent(in) :: x
      dT0 = 10.0d0 * x
    end function dT0

    real(dp) function B02(x)
      real(dp), intent(in) :: x
      B02 = 0.25d0 * x
    end function B02

    real(dp) function dB02()
      dB02 = 0.25d0
    end function dB02
  end subroutine test_kappa_perp_dT


  @test
  subroutine test_kappa_perp_dB2()
    call set_name("thermal conduction (kappa_perp dB2)")
    call background%set_density_funcs(rho0_func=rho0, drho0_func=drho0)
    call background%set_temperature_funcs(T0_func=T0)
    call background%set_magnetic_3_funcs(B03_func=B03, dB03_func=dB03)
    call settings%physics%enable_perpendicular_conduction()
    expected = ( &
      -tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (xvals**3 * unit_numberdensity) ** 2 &
      / ( &
        (3.0d0 * sqrt(xvals) * unit_magneticfield) ** 4 &
        * sqrt(5.0d0 * xvals * unit_temperature) &
      ) &
    )
    actual = get_actual( &
      physics%conduction%dtcperpdB2 &
    ) * unit_conduction / (unit_magneticfield ** 2)
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_parallel_conduction())
    @assertTrue(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=TOL)

    contains

    real(dp) function rho0(x)
      real(dp), intent(in) :: x
      rho0 = x**3
    end function rho0

    real(dp) function drho0(x)
      real(dp), intent(in) :: x
      drho0 = 3.0d0 * x**2
    end function drho0

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = 5.0d0 * x
    end function T0

    real(dp) function dT0()
      dT0 = 10.0d0
    end function dT0

    real(dp) function B03(x)
      real(dp), intent(in) :: x
      B03 = 3.0d0 * sqrt(x)
    end function B03

    real(dp) function dB03(x)
      real(dp), intent(in) :: x
      dB03 = 3.0d0 / (2.0d0 * sqrt(x))
    end function dB03
  end subroutine test_kappa_perp_db2


  @test
  subroutine test_kappa_perp_dr()
    integer, parameter :: pts = 250
    real(dp) :: dkrho(pts), dkT(pts), dkB2(pts)

    call set_name("thermal conduction (kappa_perp dr)")
    call background%set_density_funcs(rho0_func=rho0, drho0_func=drho0)
    call background%set_temperature_funcs(T0_func=T0, dT0_func=dT0)
    call background%set_magnetic_1_funcs(B01_func=B01)
    call background%set_magnetic_2_funcs(B02_func=B02, dB02_func=dB02)
    call background%set_magnetic_3_funcs(B03_func=B03, dB03_func=dB03)
    call settings%physics%enable_perpendicular_conduction()

    dkrho = ( &
      2.0d0 &
      * tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (5.0d0 * xvals * unit_numberdensity) &
      / ( &
        (B0(xvals) * unit_magneticfield)**2 &
        * sqrt(xvals**2 * unit_temperature) &
      ) &
    ) / (unit_conduction / unit_numberdensity)
    dkT = ( &
      -0.5d0 &
      * tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (5.0d0 * xvals * unit_numberdensity)**2 &
      / ( &
        (B0(xvals) * unit_magneticfield)**2 &
        * (xvals**2 * unit_temperature)**1.5d0 &
      ) &
    ) / (unit_conduction / unit_temperature)
    dkB2 = ( &
      -tc_pf_kappa_para &
      * tc_pf_kappa_perp &
      * coulomb_log &
      * (5.0d0 * xvals * unit_numberdensity)**2 &
      / ( &
        (B0(xvals) * unit_magneticfield)**4 &
        * sqrt(xvals**2 * unit_temperature) &
      ) &
    ) / (unit_conduction / unit_magneticfield**2)

    expected = ( &
      dkrho * 5.0d0 &
      + dkT * 2.0d0 * xvals &
      + dkB2 * 2.0d0  * B0(xvals) * dB0(xvals) &
    ) * 1.0d8
    actual = get_dtcperpdr() * 1.0d8
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertFalse(settings%physics%conduction%has_parallel_conduction())
    @assertTrue(settings%physics%conduction%has_perpendicular_conduction())
    @assertTrue(any(abs(expected) > 0.0d0))
    @assertTrue(any(abs(actual) > 0.0d0))
    @assertEqual(0.0d0, abs(expected - actual), tolerance=TOL)

    contains

    real(dp) function rho0(x)
      real(dp), intent(in) :: x
      rho0 = 5.0d0 * x
    end function rho0

    real(dp) function drho0()
      drho0 = 5.0d0
    end function drho0

    real(dp) function T0(x)
      real(dp), intent(in) :: x
      T0 = x**2
    end function T0

    real(dp) function dT0(x)
      real(dp), intent(in) :: x
      dT0 = 2.0d0 * x
    end function dT0

    real(dp) function B01()
      B01 = 2.5d0
    end function B01

    real(dp) function B02(x)
      real(dp), intent(in) :: x
      B02 = 3.0d0 * x**2
    end function B02

    real(dp) function dB02(x)
      real(dp), intent(in) :: x
      dB02 = 6.0d0 * x
    end function dB02

    real(dp) function B03(x)
      real(dp), intent(in) :: x
      B03 = 1.5d0 * x**2
    end function B03

    real(dp) function dB03(x)
      real(dp), intent(in) :: x
      dB03 = 3.0d0 * x
    end function dB03

    impure elemental real(dp) function B0(x)
      real(dp), intent(in) :: x
      B0 = sqrt(B01()**2 + B02(x)**2 + B03(x)**2)
    end function B0

    impure elemental real(dp) function dB0(x)
      real(dp), intent(in) :: x
      dB0 = (B02(x) * dB02(x) + B03(x) * dB03(x)) / B0(x)
    end function dB0
  end subroutine test_kappa_perp_dr

end module mod_test_conduction
