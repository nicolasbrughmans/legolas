module mod_test_quadblock
  use mod_suite_utils
  use funit
  use mod_settings, only: settings_t
  use mod_matrix_elements, only: matrix_elements_t, new_matrix_elements
  implicit none

  type(settings_t) :: settings
  type(matrix_elements_t) :: elements

contains

  @before
  subroutine init_test()
    settings = get_settings()
  end subroutine init_test

  @after
  subroutine tear_down()
    call settings%delete()
    call elements%delete()
  end subroutine tear_down

  @test
  subroutine test_quadblock_fill()
    use mod_build_quadblock, only: add_to_quadblock

    complex(dp), allocatable :: quadblock(:, :)
    complex(dp) :: val1, val2
    real(dp)    :: spline(4), weight
    integer     :: i, idx1(16), idx2(16)
    integer :: dim_quadblock

    call set_name("filling quadblock")
    call settings%set_state_vector("mhd")
    elements = new_matrix_elements(state_vector=settings%get_state_vector())

    dim_quadblock = settings%dims%get_dim_quadblock()
    allocate(quadblock(dim_quadblock, dim_quadblock))
    quadblock = (0.0d0, 0.0d0)

    ! weight and splines are set to unity for testing purposes
    weight = 1.0d0
    spline = 1.0d0
    val1 = (3.0d0, 1.0d0)
    val2 = (-1.0d0, 5.0d0)
    call elements%add(val1, "v3", "v2", spline, spline)
    call elements%add(val2, "a2", "T", spline, spline)
    call add_to_quadblock(quadblock, elements, weight, settings%dims)
    ! first factor
    idx1 = (/ 7, 7, 8, 8,  7,  7,  8,  8, 23, 23, 24, 24, 23, 23, 24, 24 /)
    idx2 = (/ 5, 6, 5, 6, 21, 22, 21, 22,  5,  6,  5,  6, 21, 22, 21, 22 /)
    do i = 1, size(idx1)
      @assertEqual(val1, quadblock(idx1(i), idx2(i)), tolerance=TOL)
    end do
    ! second factor
    idx1 = (/ 13, 13, 14, 14, 13, 13, 14, 14, 29, 29, 30, 30, 29, 29, 30, 30 /)
    idx2 = (/  9, 10,  9, 10, 25, 26, 25, 26,  9, 10,  9, 10, 25, 26, 25, 26 /)
    do i = 1, size(idx1)
      @assertEqual(val2, quadblock(idx1(i), idx2(i)), tolerance=TOL)
    end do
  end subroutine test_quadblock_fill

end module mod_test_quadblock
