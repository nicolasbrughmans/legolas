module mod_test_integration
  use funit
  use mod_suite_utils
  use mod_integration, only: integrate_ode_rk45
  implicit none

  integer, parameter :: pts = 5000
  real(dp) :: yinit
  real(dp), allocatable :: yactual(:), yexpect(:)
  real(dp), allocatable :: xactual(:), xvalues(:)

contains

  @before
  subroutine init_test()
    call reset_globals()
    allocate(yactual(pts))
    allocate(yexpect(pts))
    allocate(xactual(pts))
    allocate(xvalues(pts))
  end subroutine init_test


  @after
  subroutine teardown_test()
    if (allocated(yactual)) deallocate(yactual)
    if (allocated(yexpect)) deallocate(yexpect)
    if (allocated(xactual)) deallocate(xactual)
    if (allocated(xvalues)) deallocate(xvalues)
  end subroutine teardown_test


  @test
  subroutine test_integration_simple()
    call set_name("integration (dy=x, x=[1, 3], y0=2)")
    xvalues = linspace(1.0d0, 3.0d0, pts)
    yexpect = 0.5d0 * xvalues**2 + 1.5d0
    call integrate_ode_rk45( &
      x0=1.0d0, &
      x1=3.0d0, &
      ax_func=ax, &
      bx_func=bx, &
      nbpoints=pts, &
      yinit=2.0d0, &
      yvalues=yactual &
    )
    @assertEqual(pts, size(yactual))
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=TOL)

  contains

    real(dp) function ax(x)
      real(dp), intent(in) :: x
      ax = 0.0d0
    end function ax

    real(dp) function bx(x)
      real(dp), intent(in) :: x
      bx = x
    end function bx
  end subroutine test_integration_simple


  @test
  subroutine test_integration_ode1()
    call set_name("integration (dy=x**3-xy, x=[0, 2], y0=0)")
    xvalues = linspace(0.0d0, 2.0d0, pts)
    yinit = 0.0d0
    yexpect = xvalues**2 - 2.0d0 + 2.0d0 * exp(-0.5d0 * xvalues**2)
    call integrate_ode_rk45( &
      x0=0.0d0, &
      x1=2.0d0, &
      ax_func=ax, &
      bx_func=bx, &
      nbpoints=pts, &
      yinit=0.0d0, &
      yvalues=yactual, &
      xvalues=xactual &
    )
    @assertEqual(pts, size(yactual))
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=TOL)
    @assertEqual(pts, size(xactual))
    @assertEqual(xvalues(1), xactual(1), tolerance=TOL)
    @assertEqual(xvalues, xactual, tolerance=TOL)

  contains

    real(dp) function ax(x)
      real(dp), intent(in) :: x
      ax = -x
    end function ax

    real(dp) function bx(x)
      real(dp), intent(in) :: x
      bx = x**3
    end function bx
  end subroutine test_integration_ode1


  @test
  subroutine test_integration_ode2()
    call set_name("integration (dy=-cos(x)y+2x*exp(-sin(x), x=[-2, 3], y0=0)")
    xvalues = linspace(-2.0d0, 3.0d0, 5000)
    yexpect = (xvalues**2 - 4.0d0) * exp(-sin(xvalues))
    call integrate_ode_rk45( &
      x0=-2.0d0, &
      x1=3.0d0, &
      ax_func=ax, &
      bx_func=bx, &
      nbpoints=pts, &
      yinit=0.0d0, &
      yvalues=yactual &
    )
    @assertEqual(pts, size(yactual))
    @assertEqual(yexpect(1), yactual(1), tolerance=TOL)
    @assertEqual(yexpect, yactual, tolerance=TOL)

  contains

    real(dp) function ax(x)
      real(dp), intent(in) :: x
      ax = -cos(x)
    end function ax

    real(dp) function bx(x)
      real(dp), intent(in) :: x
      bx = 2.0_dp * x * exp(-sin(x))
    end function bx
  end subroutine test_integration_ode2

end module mod_test_integration
