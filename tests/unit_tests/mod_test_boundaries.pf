module mod_test_boundaries
  use mod_suite_utils
  use funit
  use mod_boundary_manager, only: apply_boundary_conditions
  use mod_matrix_structure, only: matrix_t, new_matrix
  use mod_transform_matrix, only: matrix_to_array, array_to_matrix
  implicit none

  integer, parameter :: points = 160
  ! end of left quadblock, holds for dim = 160
  integer, parameter :: left_end = 32
  ! start of right quadblock, holds for dim = 160
  integer, parameter :: right_start = 129

  complex(dp) :: amat_array(points, points), amat_expected(points, points)
  complex(dp) :: bmat_array(points, points), bmat_expected(points, points)

  type(matrix_t) :: amat
  type(matrix_t) :: bmat
  type(settings_t) :: settings
  type(background_t) :: background
  type(physics_t) :: physics
  type(grid_t) :: grid

contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
    background = get_background()
    physics = get_physics(settings, background)
    call set_cartesian_grid()
    ! avoid division by B0 for MHD in boundaries if conduction is enabled
    call background%set_magnetic_3_funcs(B03_func=one)

    call reset_ab(avalue=(2.0d0, 3.0d0), bvalue=5.0d0)
    amat = array_to_matrix(array=amat_array, label="A")
    bmat = array_to_matrix(array=bmat_array, label="B")
  end subroutine init_test


  @after
  subroutine teardown_test()
    call amat%delete_matrix()
    call bmat%delete_matrix()
    call settings%delete()
    call background%delete()
    call physics%delete()
    call grid%delete()
  end subroutine teardown_test


  subroutine reset_ab(avalue, bvalue)
    complex(dp), intent(in) :: avalue
    real(dp), intent(in)    :: bvalue
    amat_array = avalue
    amat_expected = avalue
    bmat_array = bvalue
    bmat_expected = bvalue
    ! these are the zero contributions from the quadratic basis functions
    ! and are always present on the left side
    call zero_out_expected_left_idxs([1, 5, 7, 9, 11])
  end subroutine reset_ab


  subroutine zero_out_expected_left_idxs(idxs)
    integer, intent(in) :: idxs(:)
    integer :: i, j

    do i = 1, size(idxs)
      j = idxs(i)
      bmat_expected(j, 1:left_end) = 0.0d0
      bmat_expected(1:left_end, j) = 0.0d0
      bmat_expected(j, j) = 1.0d0
      amat_expected(j, 1:left_end) = (0.0d0, 0.0d0)
      amat_expected(1:left_end, j) = (0.0d0, 0.0d0)
      amat_expected(j, j) = (0.0d0, 0.0d0)
    end do
  end subroutine zero_out_expected_left_idxs


  subroutine set_cartesian_grid()
    call grid%delete()
    grid = create_test_grid(settings, pts=10, geometry="Cartesian")
  end subroutine set_cartesian_grid

  subroutine set_cylindrical_grid()
    call grid%delete()
    grid = create_test_grid(settings, pts=10, geometry="cylindrical")
  end subroutine set_cylindrical_grid


  subroutine zero_out_expected_right_idxs(idxs)
    integer, intent(in) :: idxs(:)
    integer :: i, j

    do i = 1, size(idxs)
      j = idxs(i)
      bmat_expected(j, right_start:) = 0.0d0
      bmat_expected(right_start:, j) = 0.0d0
      bmat_expected(j, j) = 1.0d0
      amat_expected(j, right_start:) = (0.0d0, 0.0d0)
      amat_expected(right_start:, j) = (0.0d0, 0.0d0)
      amat_expected(j, j) = (0.0d0, 0.0d0)
    end do
  end subroutine zero_out_expected_right_idxs


  @test
  subroutine test_regular_boundaries_wall_bmat()
    call set_name("regular boundary conditions (B-matrix, wall)")
    ! boundary conditions on odd v1, a2, a3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    ! set expected
    call zero_out_expected_left_idxs([3, 13, 15])
    call zero_out_expected_right_idxs([147, 157, 159])
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_regular_boundaries_wall_bmat


  @test
  subroutine test_regular_boundaries_wall_amat()
    call set_name("regular boundary conditions (A-matrix, wall)")
    ! boundary conditions on odd v1, a2, a3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    call zero_out_expected_left_idxs([3, 13, 15])
    call zero_out_expected_right_idxs([147, 157, 159])
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_regular_boundaries_wall_amat


  @test
  subroutine test_conduction_boundaries_no_kperp_wall_bmat()
    call set_name("conduction boundary conditions (B-matrix, wall, no k_perp)")
    call settings%physics%enable_parallel_conduction()
    ! boundary conditions on odd v1, a2, a3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    call zero_out_expected_left_idxs([3, 13, 15])
    call zero_out_expected_right_idxs([147, 157, 159])
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_conduction_boundaries_no_kperp_wall_bmat


  @test
  subroutine test_conduction_boundaries_no_kperp_wall_amat()
    call set_name("conduction boundary conditions (A-matrix, wall, no k_perp)")
    call settings%physics%enable_parallel_conduction()
    ! boundary conditions on odd v1, a2, a3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    call zero_out_expected_left_idxs([3, 13, 15])
    call zero_out_expected_right_idxs([147, 157, 159])
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_conduction_boundaries_no_kperp_wall_amat


  @test
  subroutine test_conduction_boundaries_kperp_wall_bmat()
    call set_name("conduction boundary conditions (B-matrix, wall, k_perp)")
    call settings%physics%enable_perpendicular_conduction(fixed_tc_perp_value=1.0_dp)
    ! boundary conditions on odd v1, a2, a3, even T1
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    call zero_out_expected_left_idxs([3, 10, 13, 15])
    call zero_out_expected_right_idxs([147, 154, 157, 159])
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_conduction_boundaries_kperp_wall_bmat


  @test
  subroutine test_conduction_boundaries_kperp_wall_amat()
    call set_name("conduction boundary conditions (A-matrix, wall, k_perp)")
    call settings%physics%enable_perpendicular_conduction(fixed_tc_perp_value=1.0_dp)
    ! boundary conditions on odd v1, a2, a3, even T1
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    call zero_out_expected_left_idxs([3, 10, 13, 15])
    call zero_out_expected_right_idxs([147, 154, 157, 159])
    @assertTrue(settings%physics%conduction%is_enabled())
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_conduction_boundaries_kperp_wall_amat


  @test
  subroutine test_viscous_boundaries_wall_bmat()
    call set_name("viscous boundary conditions (B-matrix, wall)")
    ! zero viscosity value to prevent natural boundaries from being applied
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    call zero_out_expected_left_idxs([3, 6, 8, 13, 15])
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_wall_bmat


  @test
  subroutine test_viscous_boundaries_wall_amat()
    call set_name("viscous boundary conditions (A-matrix, wall)")
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    call zero_out_expected_left_idxs([3, 6, 8, 13, 15])
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_wall_amat


  @test
  subroutine test_viscous_boundaries_cylindrical_wall_bmat()
    call set_name("viscous boundary conditions (B-matrix, wall, cylindrical)")
    call set_cylindrical_grid()
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    ! no additional left side boundary conditions
    call zero_out_expected_left_idxs([3, 13, 15])
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_cylindrical_wall_bmat


  @test
  subroutine test_viscous_boundaries_cylindrical_wall_amat()
    call set_name("viscous boundary conditions (A-matrix, wall, cylindrical)")
    call set_cylindrical_grid()
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    ! no additional left side boundary conditions
    call zero_out_expected_left_idxs([3, 13, 15])
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_cylindrical_wall_amat


  @test
  subroutine test_viscous_boundaries_cylindrical_coax_wall_bmat()
    call set_name("viscous boundary conditions (B-matrix, wall, coaxial)")
    call set_cylindrical_grid()
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    settings%grid%coaxial = .true.
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=bmat, array=bmat_array)
    call zero_out_expected_left_idxs([3, 6, 8, 13, 15])
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(bmat_expected, bmat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_cylindrical_coax_wall_bmat


  @test
  subroutine test_viscous_boundaries_cylindrical_coax_wall_amat()
    call set_name("viscous boundary conditions (A-matrix, wall, coaxial)")
    call set_cylindrical_grid()
    call settings%physics%enable_viscosity(viscosity_value=0.0_dp)
    settings%grid%coaxial = .true.
    call apply_boundary_conditions(amat, bmat, settings, grid, background, physics)
    call matrix_to_array(matrix=amat, array=amat_array)
    call zero_out_expected_left_idxs([3, 6, 8, 13, 15])
    ! boundary conditions on odd v1, a2, a3, even v2, v3
    call zero_out_expected_right_idxs([147, 150, 152, 157, 159])
    @assertTrue(settings%physics%viscosity%is_enabled())
    @assertEqual(amat_expected, amat_array, tolerance=TOL)
  end subroutine test_viscous_boundaries_cylindrical_coax_wall_amat

end module mod_test_boundaries
