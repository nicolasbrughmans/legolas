module mod_test_solvers_lapack
  use mod_suite_utils
  use funit
  use mod_global_variables, only: solver, write_eigenfunctions
  use mod_solvers, only: solve_evp
  use mod_matrix_structure, only: matrix_t, new_matrix
  use mod_transform_matrix, only: array_to_matrix
  use mod_settings, only: settings_t
  implicit none

  real(dp), parameter :: bmat_array(5, 5) = reshape( &
    [ &
      1.0d0, -2.0d0, 0.0d0, 1.0d0, 0.0d0, &
      2.0d0, 5.0d0, 4.0d0, 3.0d0, -2.0d0, &
      3.0d0, 3.0d0, 2.0d0, 0.0d0, 3.0d0, &
      4.0d0, -1.0d0, -2.0d0, 0.0d0, 0.0d0, &
      5.0d0, 0.0d0, 0.0d0, -2.0d0, -3.0d0 &
    ], &
    shape=[5, 5] &
  )
  complex(dp), parameter :: amat_array(5, 5) = reshape( &
    [ &
      (1.0d0, 0.0d0), (2.0d0, 0.0d0), (3.0d0, 0.0d0), (1.0d0, 0.0d0), (0.0d0, 0.0d0), &
      (0.0d0, 2.0d0), (0.0d0, 1.0d0), (-1.0d0, 0.0d0), (0.0d0, 0.0d0), (0.0d0, -1.0d0),&
      (-3.0d0, 0.0d0), (3.0d0, 0.0d0), (0.0d0, -2.0d0), (0.0d0, 0.0d0), (0.0d0, 3.0d0),&
      (0.0d0, 0.0d0), (0.0d0, 5.0d0), (4.0d0, 0.0d0), (0.0d0, -3.0d0), (0.0d0, 2.0d0), &
      (1.0d0, 0.0d0), (0.0d0, 0.0d0), (2.0d0, 0.0d0), (0.0d0, 2.0d0), (-5.0d0, 0.0d0) &
    ], &
    shape=[5, 5] &
  )
  type(matrix_t) :: amat, bmat, idmat
  complex(dp) :: vr(5, 5)
  complex(dp) :: eigenvals(5), expected(5)
  type(settings_t) :: settings


contains

  @before
  subroutine init_test()
    vr = (0.0d0, 0.0d0)
    eigenvals = (0.0d0, 0.0d0)
    expected = (0.0d0, 0.0d0)
    write_eigenfunctions = .false.
    settings = create_settings(physics_type="mhd")
    call set_matrices()
  end subroutine init_test


  @after
  subroutine tear_down()
    call bmat%delete_matrix()
    call amat%delete_matrix()
    call idmat%delete_matrix()
    call settings%delete()
  end subroutine tear_down


  subroutine set_matrices()
    integer :: i

    bmat = array_to_matrix(array=bmat_array)
    amat = array_to_matrix(array=amat_array)
    idmat = new_matrix(nb_rows=5)
    do i = 1, 5
      call idmat%add_element(row=i, column=i, element=1.0d0)
    end do
  end subroutine set_matrices


  @test
  subroutine test_unknown_solver()
    call set_name("solver (unknown)")
    solver = "unknown"
    call solve_evp(amat, bmat, eigenvals, vr, settings)
    @assertExceptionRaised("unknown solver passed: unknown")
  end subroutine test_unknown_solver


  @test
  subroutine test_lapack_qr_simple()
    call set_name("solver QR-invert (AX = wX)")
    solver = "QR-invert"
    ! these come from scipy.linalg.eigvals
    expected = [ &
      (-4.82361603918897d0, -0.55489270355141d0), &
      (-2.01155112095697d0, -2.49781686227086d0), &
      (-0.05902597975282d0, 2.062061812204889d0), &
      (0.663744370985872d0, -5.82933550828359d0), &
      (2.230448768912873d0, 2.819983261900966d0) &
    ]
    call solve_evp(amat, idmat, eigenvals, vr, settings)
    call sort_complex_array(eigenvals)
    @assertEqual(expected, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_simple


  @test
  subroutine test_lapack_qr_general()
    call set_name("solver QR-invert (AX = wBX)")
    solver = "QR-invert"
    write_eigenfunctions = .true.
    ! these come from scipy.linalg.eigvals
    expected = [ &
      (-1.0912043648361447d0, -1.471457235137944d0), &
      (-0.558926729560291d0, 0.5012768267805334d0), &
      (0.017238447154045447d0, 0.9160844663696124d0), &
      (0.6276596796722511d0, 0.48642862257574954d0), &
      (0.6282488405860116d0, -0.23788823614350615d0) &
    ]
    call solve_evp(amat, bmat, eigenvals, vr, settings)
    call sort_complex_array(eigenvals)
    @assertEqual(expected, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_general


  @test
  subroutine test_lapack_qz_simple()
    call set_name("solver QZ-direct (AX = wX)")
    solver = "QZ-direct"
    ! these come from scipy.linalg.eigvals
    expected = [ &
      (-4.82361603918897d0, -0.55489270355141d0), &
      (-2.01155112095697d0, -2.49781686227086d0), &
      (-0.05902597975282d0, 2.062061812204889d0), &
      (0.663744370985872d0, -5.82933550828359d0), &
      (2.230448768912873d0, 2.819983261900966d0) &
    ]
    call solve_evp(amat, idmat, eigenvals, vr, settings)
    call sort_complex_array(eigenvals)
    @assertEqual(expected, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qz_simple


    @test
  subroutine test_lapack_qz_general()
    call set_name("solver QZ-direct (AX = wBX)")
    solver = "QZ-direct"
    ! these come from scipy.linalg.eigvals
    expected = [ &
      (-1.0912043648361447d0, -1.471457235137944d0), &
      (-0.558926729560291d0, 0.5012768267805334d0), &
      (0.017238447154045447d0, 0.9160844663696124d0), &
      (0.6276596796722511d0, 0.48642862257574954d0), &
      (0.6282488405860116d0, -0.23788823614350615d0) &
    ]
    call solve_evp(amat, bmat, eigenvals, vr, settings)
    call sort_complex_array(eigenvals)
    @assertEqual(expected, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qz_general

end module mod_test_solvers_lapack
