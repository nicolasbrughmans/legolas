module mod_test_solvers_lapack
  use mod_suite_utils
  use funit
  use mod_solvers, only: solve_evp
  use mod_matrix_structure, only: matrix_t, new_matrix
  use mod_transform_matrix, only: array_to_matrix
  implicit none

  real(dp), parameter :: bmat_array(5, 5) = reshape( &
    [ &
      1.0d0, -2.0d0, 0.0d0, 1.0d0, 0.0d0, &
      2.0d0, 5.0d0, 4.0d0, 3.0d0, -2.0d0, &
      3.0d0, 3.0d0, 2.0d0, 0.0d0, 3.0d0, &
      4.0d0, -1.0d0, -2.0d0, 0.0d0, 0.0d0, &
      5.0d0, 0.0d0, 0.0d0, -2.0d0, -3.0d0 &
    ], &
    shape=[5, 5] &
  )
  real(dp), parameter :: bmat_array_hermitian(5, 5) = reshape( &
    [ &
      55.0d0,  13.0d0,   6.0d0,  -3.0d0, -10.0d0, &
      13.0d0,  39.0d0,  28.0d0,  13.0d0,  -1.0d0, &
      6.0d0,  28.0d0,  24.0d0,  12.0d0,  -2.0d0, &
      -3.0d0,  13.0d0,  12.0d0,  14.0d0,   0.0d0, &
      -10.0d0,  -1.0d0,  -2.0d0,   0.0d0,  22.0d0 &
    ], &
    shape=[5, 5] &
  )
  complex(dp), parameter :: amat_array(5, 5) = reshape( &
    [ &
      (1.0d0, 0.0d0), (2.0d0, 0.0d0), (3.0d0, 0.0d0), (1.0d0, 0.0d0), (0.0d0, 0.0d0), &
      (0.0d0, 2.0d0), (0.0d0, 1.0d0), (-1.0d0, 0.0d0), (0.0d0, 0.0d0), (0.0d0, -1.0d0),&
      (-3.0d0, 0.0d0), (3.0d0, 0.0d0), (0.0d0, -2.0d0), (0.0d0, 0.0d0), (0.0d0, 3.0d0),&
      (0.0d0, 0.0d0), (0.0d0, 5.0d0), (4.0d0, 0.0d0), (0.0d0, -3.0d0), (0.0d0, 2.0d0), &
      (1.0d0, 0.0d0), (0.0d0, 0.0d0), (2.0d0, 0.0d0), (0.0d0, 2.0d0), (-5.0d0, 0.0d0) &
    ], &
    shape=[5, 5] &
  )
  type(matrix_t) :: amat, bmat, bmat_hermitian, idmat
  type(settings_t) :: settings
  complex(dp) :: vr(5, 5)
  complex(dp) :: eigenvals(5)
  ! these come from scipy.linalg.eigvals
  complex(dp), parameter :: expected_simple(5) = [ &
    (-4.82361603918897d0, -0.55489270355141d0), &
    (-2.01155112095697d0, -2.49781686227086d0), &
    (-0.05902597975282d0, 2.062061812204889d0), &
    (0.663744370985872d0, -5.82933550828359d0), &
    (2.230448768912873d0, 2.819983261900966d0) &
  ]
  complex(dp), parameter :: expected_general(5) = [ &
    (-1.0912043648361447d0, -1.471457235137944d0), &
    (-0.558926729560291d0, 0.5012768267805334d0), &
    (0.017238447154045447d0, 0.9160844663696124d0), &
    (0.6276596796722511d0, 0.48642862257574954d0), &
    (0.6282488405860116d0, -0.23788823614350615d0) &
  ]
  complex(dp), parameter :: expected_b_hermitian(5) = [ &
    (-0.7573291032244991d0, -0.8342746803823134d0), &
    (-0.20842078110630927d0, -0.32089038501060607d0), &
    (-0.043930679967276426d0, -0.06224543824036125d0), &
    (0.010698560246044606d0, 0.3788642492245973d0), &
    (0.03473565736521634d0, 0.040781546673737325d0) &
  ]


contains

  @before
  subroutine init_test()
    settings = get_settings()
    vr = (0.0d0, 0.0d0)
    eigenvals = (0.0d0, 0.0d0)
    settings%io%write_eigenfunctions = .false.
    call set_matrices()
    settings%solvers%maxiter = 100
    settings%solvers%tolerance = 1.0d-13
  end subroutine init_test


  @after
  subroutine tear_down()
    call bmat%delete_matrix()
    call bmat_hermitian%delete_matrix()
    call amat%delete_matrix()
    call idmat%delete_matrix()
    call settings%delete()
  end subroutine tear_down


  subroutine set_matrices()
    integer :: i

    bmat = array_to_matrix(array=bmat_array)
    bmat_hermitian = array_to_matrix(array=bmat_array_hermitian)
    amat = array_to_matrix(array=amat_array)
    idmat = new_matrix(nb_rows=5)
    do i = 1, 5
      call idmat%add_element(row=i, column=i, element=1.0d0)
    end do
  end subroutine set_matrices


  @test
  subroutine test_unknown_solver()
    call set_name("solver (unknown)")
    call settings%solvers%set_solver("unknown")
    call solve_evp(amat, bmat, settings, eigenvals, vr)
    @assertExceptionRaised("unknown solver passed: unknown")
  end subroutine test_unknown_solver


  @test
  subroutine test_lapack_qr_invert_simple()
    call set_name("solver QR-invert (AX = wX)")
    call settings%solvers%set_solver("QR-invert")
    call solve_evp(amat, idmat, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_simple, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_invert_simple


  @test
  subroutine test_lapack_qr_invert_general()
    call set_name("solver QR-invert (AX = wBX)")
    call settings%solvers%set_solver("QR-invert")
    settings%io%write_eigenfunctions = .true.
    call solve_evp(amat, bmat, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_general, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_invert_general


  @test
  subroutine test_lapack_qz_simple()
    call set_name("solver QZ-direct (AX = wX)")
    call settings%solvers%set_solver("QZ-direct")
    call solve_evp(amat, idmat, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_simple, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qz_simple


    @test
  subroutine test_lapack_qz_general()
    call set_name("solver QZ-direct (AX = wBX)")
    call settings%solvers%set_solver("QZ-direct")
    call solve_evp(amat, bmat, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_general, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qz_general


  @test
  subroutine test_lapack_qr_cholesky_simple()
    call set_name("solver QR-cholesky (AX = wX)")
    call settings%solvers%set_solver("QR-cholesky")
    call solve_evp(amat, idmat, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_simple, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_cholesky_simple



  @test
  subroutine test_lapack_qr_cholesky_general()
    call set_name("solver QR-cholesky (AX = wBX)")
    call settings%solvers%set_solver("QR-cholesky")
    settings%io%write_eigenfunctions = .true.
    call solve_evp(amat, bmat_hermitian, settings, eigenvals, vr)
    call sort_complex_array(eigenvals)
    @assertEqual(expected_b_hermitian, eigenvals, tolerance=TOL)
  end subroutine test_lapack_qr_cholesky_general


  @test
  subroutine test_lapack_qr_cholesky_general_unequal_diags()
    call set_name("solver QR-cholesky (AX = wBX) B unequal diagonals")
    call settings%solvers%set_solver("QR-cholesky")
    settings%io%write_derived_eigenfunctions = .true.
    call solve_evp(amat, bmat, settings, eigenvals, vr)
    @assertExceptionRaised("B has unequal sub/super diagonals: 3/4")
  end subroutine test_lapack_qr_cholesky_general_unequal_diags


  @test
  subroutine test_inverse_iteration_simple_1()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wX, sigma = -4.5 - 0.2i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (-4.5d0, -0.2d0)
    call solve_evp(amat, idmat, settings, omega, vr)
    @assertEqual(expected_simple(1), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_simple_1


  @test
  subroutine test_inverse_iteration_simple_2()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wX, sigma = -0.06 + 2i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (-0.06d0, 2.0d0)
    call solve_evp(amat, idmat, settings, omega, vr)
    @assertEqual(expected_simple(3), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_simple_2

  @test
  subroutine test_inverse_iteration_simple_3()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wX, sigma = 2 + 2.5i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (2.0d0, 2.5d0)
    call solve_evp(amat, idmat, settings, omega, vr)
    @assertEqual(expected_simple(5), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_simple_3


  @test
  subroutine test_inverse_iteration_general_1()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wBX, sigma = -1 - i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (-1.0d0, -1.0d0)
    call solve_evp(amat, bmat_hermitian, settings, omega, vr)
    @assertEqual(expected_b_hermitian(1), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_general_1


  @test
  subroutine test_inverse_iteration_general_2()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wBX, sigma = -0.1 - 0.3i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (-0.1d0, -0.3d0)
    call solve_evp(amat, bmat_hermitian, settings, omega, vr)
    @assertEqual(expected_b_hermitian(2), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_general_2

  @test
  subroutine test_inverse_iteration_general_3()
    complex(dp) :: omega(1)

    call set_name("inverse iteration (AX = wBX, sigma = 0.4i)")
    call settings%solvers%set_solver("inverse-iteration")
    settings%solvers%sigma = (0.0d0, 0.4d0)
    call solve_evp(amat, bmat_hermitian, settings, omega, vr)
    @assertEqual(expected_b_hermitian(4), omega(1), tolerance=TOL)
  end subroutine test_inverse_iteration_general_3

end module mod_test_solvers_lapack
