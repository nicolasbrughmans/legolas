module mod_test_cooling
  use mod_suite_utils
  use funit
  implicit none

  type(settings_t) :: settings

contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
    call set_default_units(settings)
    call reset_fields(settings, init_fields=.true.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up(settings)
    call settings%delete()
  end subroutine teardown_test


  @test
  subroutine test_rosner_curve()
    use mod_cooling_curves, only: get_rosner_cooling

    integer, parameter  :: nbvals = 9
    real(dp) :: unit_temperature, unit_lambdaT, unit_dlambdaT_dT
    real(dp)  :: logT0(nbvals), T0(nbvals), lambda(nbvals), dlambda(nbvals)
    real(dp)  :: results_l(nbvals), results_dl(nbvals)
    real(dp)  :: alphavals(nbvals), logxivals(nbvals)
    integer   :: i

    call set_name("checking Rosner cooling curve")

    unit_temperature = settings%units%get_unit_temperature()
    unit_lambdaT = settings%units%get_unit_lambdaT()
    unit_dlambdaT_dT = unit_lambdaT / unit_temperature

    logT0 = [4.0d0, 5.0d0, 6.2d0, 4.4d0, 7.5d0, 4.7d0, 3.8d0, 5.6d0, 8.0d0]
    T0 = 10.0d0 ** logT0 / unit_temperature
    alphavals = [ &
      6.15d0, 0.0d0, 0.0d0, 0.0d0, -2.0d0/3.0d0, 2.0d0, 11.7d0, -2.0d0, 0.5d0 &
    ]
    logxivals = [ &
      -48.307d0, &
      -21.2d0, &
      -21.94d0, &
      -21.85d0, &
      -17.73d0, &
      -31.0d0, &
      -69.9d0, &
      -10.4d0, &
      -26.602d0 &
    ]
    do i = 1, nbvals
      results_l(i) = 10.0d0 ** (logxivals(i) + alphavals(i) * logT0(i))
      results_dl(i) = alphavals(i) * 10.0d0 ** ( &
        logxivals(i) + (alphavals(i) - 1.0d0) * logT0(i) &
      )
    end do
    call get_rosner_cooling(settings, T0, lambda, dlambda)

    results_l = results_l / unit_lambdaT
    results_dl = results_dl / unit_dlambdaT_dT

    @assertEqual(results_l, lambda, tolerance=1.0d-6)
    @assertEqual(results_dl, dlambda, tolerance=1.0d-6)
  end subroutine test_rosner_curve

end module mod_test_cooling
