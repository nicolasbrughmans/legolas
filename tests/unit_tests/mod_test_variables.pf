module mod_test_variables
  use mod_global_variables
  use mod_suite_utils
  use mod_settings, only: settings_t
  use funit
  implicit none

  type(settings_t) :: settings

contains


  @before
  subroutine init_test()
    call reset_globals()
    settings = create_settings(physics_type="mhd")
  end subroutine init_test


  @after
  subroutine teardown_test()
    call settings%delete()
  end subroutine teardown_test


  @test
  subroutine test_gamma()
    call set_name("setting gamma")
    call set_gamma(5.0d0 / 3.0d0)
    @assertEqual(5.0d0 / 3.0d0, gamma, tolerance=TOL)
    @assertEqual(2.0d0 / 3.0d0, gamma_1, tolerance=TOL)
  end subroutine test_gamma


  @test
  subroutine test_gamma_incompressible()
    call set_name("setting incompressible")
    incompressible = .true.
    call set_gamma(1.0d0)
    @assertGreaterThan(gamma, 1.0d5)
  end subroutine test_gamma_incompressible


  @test
  subroutine test_gridpts()
    call set_name("setting gridpoints")
    call set_gridpts(11)
    @assertEqual(11, gridpts)
    @assertEqual(40, gauss_gridpts)
    @assertEqual(21, ef_gridpts)
  end subroutine test_gridpts

  @test
  subroutine test_properties_mhd()
    call set_name("properties MHD")
    call settings%dims%set_dim_matrix(gridpts=10)
    @assertEqual(size(settings%get_state_vector()), 8)
    @assertEqual(16, settings%dims%get_dim_subblock())
    @assertEqual(32, settings%dims%get_dim_quadblock())
    @assertEqual(160, settings%dims%get_dim_matrix())
  end subroutine test_properties_mhd


  @test
  subroutine test_properties_hd()
    call set_name("properties HD")
    call settings%delete()
    settings = create_settings(physics_type="hydro")
    call settings%dims%set_dim_matrix(gridpts=10)
    @assertEqual(size(settings%get_state_vector()), 5)
    @assertEqual(10, settings%dims%get_dim_subblock())
    @assertEqual(20, settings%dims%get_dim_quadblock())
    @assertEqual(100, settings%dims%get_dim_matrix())
  end subroutine test_properties_hd

end module mod_test_variables
