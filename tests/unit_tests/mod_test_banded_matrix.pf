module mod_test_banded_matrix
  use mod_suite_utils
  use funit
  use mod_banded_matrix, only: banded_matrix_t, new_banded_matrix
  use mod_banded_operations, only: multiply
  use mod_transform_matrix, only: banded_to_array, array_to_banded, matrix_to_banded, &
    array_to_matrix
  use mod_matrix_structure, only: matrix_t, new_matrix
  implicit none

  complex(dp), parameter :: izero = (0.0d0, 0.0d0)
  complex(dp), parameter :: array(5, 5) = reshape( &
    [ &
      (1.0d0, 0.0d0), (0.0d0, 2.0d0), (-3.0d0, 0.0d0), izero, izero, & ! column 1
      (2.0d0, 1.0d0), (0.0d0, 1.0d0), (3.0d0, 0.0d0), (0.0d0, 5.0d0), izero, &
      izero, (9.0d0, 0.0d0), (0.0d0, -2.0d0), (4.0d0, 0.0d0), (2.0d0, 0.0d0), &
      izero, izero, (1.0d0, 1.0d0), (0.0d0, -3.0d0), (0.0d0, 6.0d0), &
      izero, izero, izero, (0.0d0, 7.0d0), (-5.0d0, 0.0d0) &
    ], &
    shape=[5, 5] &
  )
  type(banded_matrix_t) :: bandmatrix
  type(banded_matrix_t) :: actual
  type(matrix_t) :: matrix


contains

  @before
  subroutine init_test()
    call reset_globals()
    bandmatrix = new_banded_matrix(rows=5, cols=5, subdiags=2, superdiags=1)
    matrix = new_matrix(nb_rows=5)
    call fill_bandmatrix()
  end subroutine init_test


  @after
  subroutine tear_down()
    call bandmatrix%destroy()
    call actual%destroy()
    call matrix%delete_matrix()
  end subroutine tear_down


  subroutine fill_bandmatrix()
    integer :: i, j
    do j = 1, 5
      do i = 1, 5
        call bandmatrix%set_element(row=i, col=j, element=array(i, j))
        call matrix%add_element(row=i, column=j, element=array(i, j))
      end do
    end do
  end subroutine fill_bandmatrix


  @test
  subroutine test_init_banded()
    call set_name("banded matrix: initialisation")
    @assertEqual(5, bandmatrix%m)
    @assertEqual(5, bandmatrix%n)
    @assertEqual(2, bandmatrix%kl)
    @assertEqual(1, bandmatrix%ku)
    @assertEqual([4, 5], shape(bandmatrix%AB))
  end subroutine test_init_banded


  @test
  subroutine test_banded_get_element_inside()
    call set_name("banded matrix: get element inside band")
    ! a22 -> AB22
    @assertEqual(array(2, 2), bandmatrix%get_element(row=2, col=2), tolerance=TOL)
    @assertEqual(array(2, 2), bandmatrix%AB(2, 2), tolerance=TOL)
    ! a21 -> AB31
    @assertEqual(array(2, 1), bandmatrix%get_element(row=2, col=1), tolerance=TOL)
    @assertEqual(array(2, 1), bandmatrix%AB(3, 1), tolerance=TOL)
    ! a43 -> AB33
    @assertEqual(array(4, 3), bandmatrix%get_element(row=4, col=3), tolerance=TOL)
    @assertEqual(array(4, 3), bandmatrix%AB(3, 3), tolerance=TOL)
    ! a54 -> AB34
    @assertEqual(array(5, 4), bandmatrix%get_element(row=5, col=4), tolerance=TOL)
    @assertEqual(array(5, 4), bandmatrix%AB(3, 4), tolerance=TOL)
  end subroutine test_banded_get_element_inside


  @test
  subroutine test_banded_get_element_outside()
    call set_name("banded matrix: get element outside band")
    ! a13 -> not in banded
    @assertEqual(izero, array(1, 3), tolerance=TOL)
    @assertEqual(izero, bandmatrix%get_element(row=1, col=3), tolerance=TOL)
    ! a52 -> not in banded
    @assertEqual(izero, array(5, 2), tolerance=TOL)
    @assertEqual(izero, bandmatrix%get_element(row=5, col=2), tolerance=TOL)
  end subroutine test_banded_get_element_outside


  @test
  subroutine test_banded_set_element_inside()
    complex(dp), parameter :: element = (-7.0d0, 3.5d0)
    call set_name("banded matrix: set element inside band")
    call bandmatrix%set_element(row=2, col=3, element=element)
    @assertEqual(element, bandmatrix%get_element(row=2, col=3), tolerance=TOL)
    @assertEqual(element, bandmatrix%AB(1, 3), tolerance=TOL)
  end subroutine test_banded_set_element_inside


  @test
  subroutine test_banded_set_element_outside()
    call set_name("banded matrix: set element outside band")
    call bandmatrix%set_element(row=1, col=4, element=(1.0d0, 1.0d0))
    ! has no effect
    @assertEqual(izero, bandmatrix%get_element(row=1, col=4), tolerance=TOL)
  end subroutine test_banded_set_element_outside


  @test
  subroutine test_transform_array_to_banded()
    call set_name("banded matrix: array to banded")
    call array_to_banded(array, subdiags=2, superdiags=1, banded=actual)
    @assertEqual(bandmatrix%AB, actual%AB, tolerance=TOL)
  end subroutine test_transform_array_to_banded


  @test
  subroutine test_transform_banded_to_array()
    complex(dp) :: actual_array(5, 5)

    call set_name("banded matrix: banded to array")
    actual_array = banded_to_array(bandmatrix)
    @assertEqual(array, actual_array, tolerance=TOL)
  end subroutine test_transform_banded_to_array


  @test
  subroutine test_transform_matrix_to_banded()
    call set_name("banded matrix: matrix to banded")
    call matrix_to_banded(matrix=matrix, subdiags=2, superdiags=1, banded=actual)
    call array_to_banded(array, subdiags=2, superdiags=1, banded=bandmatrix)
    ! in AB elements 11, 35, 44 and 45 are not referenced (and not set)
    @assertEqual(bandmatrix%AB, actual%AB, tolerance=TOL)
  end subroutine test_transform_matrix_to_banded


  @test
  subroutine test_banded_not_square()
    character(len=125) :: msg
    call set_name("banded matrix: original not square")
    bandmatrix = new_banded_matrix(rows=5, cols=4, subdiags=2, superdiags=1)
    msg = "banded matrix creation failed, expected a square matrix but got 5 x 4"
    @assertExceptionRaised(msg)
    @assertFalse(allocated(bandmatrix%AB))
  end subroutine test_banded_not_square


  @test
  subroutine test_banded_total_elements()
    call set_name("banded matrix: get total number of elements")
    @assertEqual(16, bandmatrix%get_total_nb_elements())
  end subroutine test_banded_total_elements


  @test
  subroutine test_banded_nb_nonzero_elements()
    call set_name("banded matrix: get total number of nonzero elements")
    call bandmatrix%set_element(row=3, col=3, element=(0.0d0, 0.0d0))
    @assertEqual(15, bandmatrix%get_total_nb_nonzero_elements())
  end subroutine test_banded_nb_nonzero_elements


  @test
  subroutine test_banded_matrix_x_unitvector()
    complex(dp) :: unitvec(5), expected_vector(5), actual_vector(5)

    call set_name("banded matrix: matrix-vector multiplication 1")
    unitvec = (1.0_dp, 0.0_dp)
    expected_vector = sum(array, dim=2)
    actual_vector = multiply(bandmatrix, unitvec)
    @assertEqual(expected_vector, actual_vector, tolerance=TOL)
  end subroutine test_banded_matrix_x_unitvector


  @test
  subroutine test_banded_matrix_x_vector()
    integer :: i, j
    complex(dp) :: vector(5), expected_vector(5), actual_vector(5)

    call set_name("banded matrix: matrix-vector multiplication 2")
    vector = [ &
      (1.0_dp, -2.0_dp), &
      (0.0_dp, 3.5_dp), &
      (-3.2_dp, 1.6_dp), &
      (5.6_dp, -1.9_dp), &
      (6.3_dp, 0.0_dp) &
    ]
    expected_vector = (0.0_dp, 0.0_dp)
    do i = 1, 5
      do j = 1, 5
        expected_vector(i) = expected_vector(i) + array(i, j) * vector(j)
      end do
    end do
    actual_vector = multiply(bandmatrix, vector)
    @assertEqual(expected_vector, actual_vector, tolerance=TOL)
  end subroutine test_banded_matrix_x_vector
end module mod_test_banded_matrix
