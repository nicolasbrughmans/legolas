module mod_test_input
  use funit
  use mod_suite_utils
  use mod_input, only: read_parfile
  implicit none

  character(:), allocatable :: error_msg
  type(settings_t) :: settings

contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
  end subroutine init_test


  @after
  subroutine teardown_test()
    call settings%delete()
    if (allocated(error_msg)) deallocate(error_msg)
  end subroutine teardown_test


  @test
  subroutine test_no_parfile_given()
    call set_name("no parfile given")
    call read_parfile(parfile="", settings=settings)
    @assertExceptionRaised("no parfile supplied!")
  end subroutine test_no_parfile_given


  @test
  subroutine test_parfile_gridpoints()
    call set_name("setting gridpoints through parfile")
    call read_parfile("test_parfiles/parfile_gridpts.par", settings)
    @assertEqual(100, settings%grid%get_gridpts())
  end subroutine test_parfile_gridpoints


  @test
  subroutine test_parfile_gamma()
    call set_name("setting gamma through parfile")
    call read_parfile("test_parfiles/parfile_gamma.par", settings)
    @assertEqual(2.0d0, settings%physics%get_gamma(), tolerance=TOL)
    @assertEqual(1.0d0, settings%physics%get_gamma_1(), tolerance=TOL)
  end subroutine test_parfile_gamma


  @test
  subroutine test_parfile_dryrun()
    call set_name("setting dry run flag")
    call read_parfile("test_parfiles/parfile_dryrun.par", settings)
    @assertEqual("none", settings%solvers%get_solver())
    @assertFalse(settings%io%write_eigenfunctions)
    @assertFalse(settings%io%write_matrices)
  end subroutine test_parfile_dryrun


  @test
  subroutine test_parfile_units_rho()
    call set_name("setting units through parfile (rho)")
    call read_parfile("test_parfiles/parfile_units_rho.par", settings)
    @assertTrue(settings%units%in_cgs())
    @assertEqual(1.0d-15, settings%units%get_unit_density(), tolerance=TOL)
    @assertEqual(10.0d0, settings%units%get_unit_magneticfield(), tolerance=TOL)
    @assertEqual(1.0d9, settings%units%get_unit_length(), tolerance=TOL)
  end subroutine test_parfile_units_rho


  @test
  subroutine test_parfile_units_temp()
    call set_name("setting units through parfile (T)")
    call read_parfile("test_parfiles/parfile_units_temp.par", settings)
    @assertTrue(settings%units%in_cgs())
    @assertEqual(1.0d9, settings%units%get_unit_length(), tolerance=TOL)
    @assertEqual(1.0d7, settings%units%get_unit_temperature(), tolerance=TOL)
    @assertEqual(10.0d0, settings%units%get_unit_magneticfield(), tolerance=TOL)
  end subroutine test_parfile_units_temp


  @test
  subroutine test_parfile_invalid_subset_center()
    call set_name("invalid subset center through parfile")
    call read_parfile("test_parfiles/parfile_invalid_subset_center.par", settings)
    @assertExceptionRaised("eigenfunction_subset_center must be set!")
  end subroutine test_parfile_invalid_subset_center


  @test
  subroutine test_parfile_invalid_subset_radius()
    call set_name("invalid subset radius through parfile")
    call read_parfile("test_parfiles/parfile_invalid_subset_radius.par", settings)
    @assertExceptionRaised("eigenfunction_subset_radius must be set!")
  end subroutine test_parfile_invalid_subset_radius

end module mod_test_input
