module mod_test_units
  use funit
  use mod_suite_utils
  use mod_units
  implicit none

  type(settings_t) :: settings
  real(dp) :: unit_magneticfield, unit_length, unit_pressure, unit_temperature, &
    unit_density, unit_numberdensity, unit_velocity, unit_time, unit_lambdaT, &
    unit_dlambdaT_dT, unit_conduction, unit_resistivity, mean_molecular_weight

contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
    call reset_fields(settings, init_fields=.true.)
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up(settings)
    call settings%delete()
  end subroutine teardown_test


  subroutine retrieve_units()
    unit_magneticfield = settings%units%get_unit_magneticfield()
    unit_length = settings%units%get_unit_length()
    unit_pressure = settings%units%get_unit_pressure()
    unit_temperature = settings%units%get_unit_temperature()
    unit_density = settings%units%get_unit_density()
    unit_numberdensity = settings%units%get_unit_numberdensity()
    unit_velocity = settings%units%get_unit_velocity()
    unit_time = settings%units%get_unit_time()
    unit_lambdaT = settings%units%get_unit_lambdaT()
    unit_dlambdaT_dT = unit_lambdaT / unit_temperature
    unit_conduction = settings%units%get_unit_conduction()
    unit_resistivity = settings%units%get_unit_resistivity()
    mean_molecular_weight = settings%units%get_mean_molecular_weight()
  end subroutine retrieve_units


  @test
  subroutine test_units()
    call set_name("setting units (mean molecular weight = 1)")
    call settings%units%set_units_from_temperature( &
      unit_temperature=1.0d6, &
      unit_magneticfield=5.0d0, &
      unit_length=1.0d10, &
      mean_molecular_weight=1.0d0 &
    )
    call retrieve_units()
    @assertTrue(settings%units%are_set())
    @assertEqual(5.0d0, unit_magneticfield, tolerance=TOL)
    @assertEqual(1.0d10, unit_length, tolerance=TOL)
    @assertEqual(1.9894367886486917d0, unit_pressure, tolerance=TOL)
    @assertEqual(1.0d6, unit_temperature, tolerance=TOL)
    @assertEqual(2.4101533254935998d0, unit_density * 1.0d14, tolerance=TOL)
    @assertEqual(14409434091.049740d0, unit_numberdensity, tolerance=TOL)
    @assertEqual(9085372.4661753811d0, unit_velocity, tolerance=TOL)
    @assertEqual(1100.6703398489997d0, unit_time, tolerance=TOL)
    @assertEqual(8.7052055713759540d0, unit_lambdaT * 1.0d24, tolerance=TOL)
    @assertEqual(8.7052055713759540d0, unit_dlambdaT_dT * 1.0d30, tolerance=TOL)
    @assertEqual(180747742227.85196d0, unit_conduction, tolerance=TOL)
    @assertEqual(90853724661753808.0d0, unit_resistivity, tolerance=TOL)
  end subroutine test_units


  @test
  subroutine test_units_molecular_weight_half()
    call set_name("setting units (mean molecular weight = 0.5)")
    call settings%units%set_units_from_temperature( &
      unit_temperature=1.0d6, &
      unit_magneticfield=5.0d0, &
      unit_length=1.0d10, &
      mean_molecular_weight=0.5d0 &
    )
    call retrieve_units()
    @assertTrue(settings%units%are_set())
    @assertEqual(0.5d0, mean_molecular_weight, tolerance=TOL)
    @assertEqual(5.0d0, unit_magneticfield, tolerance=TOL)
    @assertEqual(1.0d10, unit_length, tolerance=TOL)
    @assertEqual(1.9894367886486917d0, unit_pressure, tolerance=TOL)
    @assertEqual(1.0d6, unit_temperature, tolerance=TOL)
    @assertEqual(2.4101533254935998d0 / 2.0d0, unit_density * 1.0d14, tolerance=TOL)
    @assertEqual(14409434091.049740d0 / 2.0d0, unit_numberdensity, tolerance=TOL)
    @assertEqual(12848656.960876318d0, unit_velocity, tolerance=TOL)
    @assertEqual(778.29146115812944d0, unit_time, tolerance=TOL)
    @assertEqual(49.244079129142825d0, unit_lambdaT * 1.0d24, tolerance=TOL)
    @assertEqual(49.244079129142825d0, unit_dlambdaT_dT * 1.0d30, tolerance=TOL)
    @assertEqual(255615908426.94446d0, unit_conduction, tolerance=TOL)
    @assertEqual(1.2848656960876318d17, unit_resistivity, tolerance=TOL)
  end subroutine test_units_molecular_weight_half

end module mod_test_units
