module mod_test_matrix_elements
  use mod_suite_utils
  use funit
  use mod_matrix_elements, only: matrix_elements_t, new_matrix_elements
  use mod_matrix_element_node, only: matrix_element_node_t
  implicit none

  type(matrix_elements_t) :: elements
  type(matrix_element_node_t), pointer :: node
  character(len=2), parameter :: state_vector(4) = ["t1", "t2", "t3", "t4"]
  real(dp), parameter :: spline1(4) = [1.0d0, 2.0d0, 3.0d0, 4.0d0]
  real(dp), parameter :: spline2(4) = [5.0d0, 6.0d0, 7.0d0, 8.0d0]

contains

  @before
  subroutine init_test()
    call reset_globals()
    elements = new_matrix_elements(state_vector=state_vector)
  end subroutine init_test


  @after
  subroutine tear_down()
    call elements%delete()
    nullify(node)
  end subroutine tear_down


  subroutine add_to_elements()
    call elements%add(3.0d0, loc1="t1", loc2="t1", spline1=spline1, spline2=spline2)
    call elements%add(4.0d0, loc1="t3", loc2="t2", spline1=spline1, spline2=spline2)
    call elements%add(5.0d0, loc1="t4", loc2="t4", spline1=spline1, spline2=spline2)
    call elements%add(6.0d0, loc1="t2", loc2="t2", spline1=spline1, spline2=spline2)
  end subroutine add_to_elements


  @test
  subroutine test_add_invalid_element()
    use mod_check_values, only: is_NaN
    call set_name("elements: add invalid element")
    call elements%add("5", loc1="t1", loc2="t1", spline1=spline1, spline2=spline2)
    @assertEqual(1, elements%get_nb_elements())
    @assertTrue(is_NaN(elements%get_elements()))
  end subroutine test_add_invalid_element


  @test
  subroutine test_add_integer_element()
    integer :: expected(1, 2)
    call set_name("elements: add single integer element")
    call elements%add(2, loc1="t1", loc2="t1", spline1=spline1, spline2=spline2)
    @assertEqual(1, elements%get_nb_elements())
    @assertEqual((2.0d0, 0.0d0), elements%get_elements(), tolerance=TOL)
    expected(1, :) = [1, 1]
    @assertEqual(expected, elements%get_positions())
  end subroutine test_add_integer_element


  @test
  subroutine test_add_real_element()
    integer :: expected(1, 2)
    call set_name("elements: add single real element")
    call elements%add(3.0d0, loc1="t2", loc2="t1", spline1=spline1, spline2=spline2)
    @assertEqual(1, elements%get_nb_elements())
    @assertEqual((3.0d0, 0.0d0), elements%get_elements(), tolerance=TOL)
    expected(1, :) = [2, 1]
    @assertEqual(expected, elements%get_positions())
  end subroutine test_add_real_element


  @test
  subroutine test_add_complex_element()
    integer :: expected(1, 2)
    call set_name("elements: add single complex element")
    call elements%add( &
      (1.0d0, 2.5d0), loc1="t3", loc2="t2", spline1=spline1, spline2=spline2 &
    )
    @assertEqual(1, elements%get_nb_elements())
    @assertEqual((1.0d0, 2.5d0), elements%get_elements(), tolerance=TOL)
    expected(1, :) = [3, 2]
    @assertEqual(expected, elements%get_positions())
  end subroutine test_add_complex_element


  @test
  subroutine test_add_multiple_elements()
    integer :: expected_positions(3, 2)
    complex(dp) :: expected_elements(3)
    call set_name("elements: add multiple elements")
    call elements%add(1.0d0, loc1="t2", loc2="t1", spline1=spline1, spline2=spline2)
    call elements%add(2.5d0, loc1="t3", loc2="t2", spline1=spline1, spline2=spline2)
    call elements%add( &
      (2.0d0, 3.5d0), loc1="t4", loc2="t4", spline1=spline1, spline2=spline2 &
    )
    @assertEqual(3, elements%get_nb_elements())
    expected_positions = reshape([2, 3, 4, 1, 2, 4], shape(expected_positions))
    @assertEqual(expected_positions, elements%get_positions())
    expected_elements = [(1.0d0, 0.0d0), (2.5d0, 0.0d0), (2.0d0, 3.5d0)]
    @assertEqual(expected_elements, elements%get_elements(), tolerance=TOL)
  end subroutine test_add_multiple_elements


  @test
  subroutine test_add_element_invalid_position()
    call set_name("elements: add element with invalid position")
    call elements%add(1.0d0, loc1="t1", loc2="t5", spline1=spline1, spline2=spline2)
    @assertEqual(0, elements%get_nb_elements())
    call elements%add(1.0d0, loc1="t5", loc2="t1", spline1=spline1, spline2=spline2)
    @assertEqual(0, elements%get_nb_elements())
    call elements%add(1.0d0, loc1="t5", loc2="t5", spline1=spline1, spline2=spline2)
    @assertEqual(0, elements%get_nb_elements())
  end subroutine test_add_element_invalid_position


  @test
  subroutine test_get_node()
    call set_name("elements: getting node")
    call add_to_elements()
    node => elements%get_node(2)
    @assertEqual((4.0d0, 0.0d0), node%get_element(), tolerance=TOL)
    node => elements%get_node(4)
    @assertEqual((6.0d0, 0.0d0), node%get_element(), tolerance=TOL)
    node => elements%get_node(1)
    @assertEqual((3.0d0, 0.0d0), node%get_element(), tolerance=TOL)
    node => elements%get_node(3)
    @assertEqual((5.0d0, 0.0d0), node%get_element(), tolerance=TOL)
  end subroutine test_get_node


  @test
  subroutine test_get_node_empty_list()
    call set_name("elements: getting node from empty list")
    node => elements%get_node(1)
    @assertExceptionRaised("get_node: inode out of range: 1")
    @assertFalse(associated(node))
  end subroutine test_get_node_empty_list


  @test
  subroutine test_get_node_underbounds()
    call set_name("elements: getting under bounds node")
    call add_to_elements()
    node => elements%get_node(0)
    @assertExceptionRaised("get_node: inode out of range: 0")
    @assertFalse(associated(node))
  end subroutine test_get_node_underbounds


  @test
  subroutine test_get_node_overbounds()
    call set_name("elements: getting over bounds node")
    call add_to_elements()
    node => elements%get_node(5)
    @assertExceptionRaised("get_node: inode out of range: 5")
    @assertFalse(associated(node))
  end subroutine test_get_node_overbounds


  @test
  subroutine test_add_element_get_splines()
    call set_name("elements: add element and retrieve splines")
    call elements%add(1.0d0, loc1="t1", loc2="t1", spline1=spline1, spline2=spline2)
    node => elements%get_node(1)
    @assertEqual(spline1, node%get_spline1())
    @assertEqual(spline2, node%get_spline2())
  end subroutine test_add_element_get_splines


  @test
  subroutine test_add_element_invalid_spline1()
    character(len=:), allocatable :: msg
    call set_name("elements: add element with invalid spline1")
    call elements%add(1.0d0, loc1="t1", loc2="t1", spline1=spline1, spline2=spline2)
    call elements%add( &
      1.0d0, loc1="t1", loc2="t2", spline1=[1.0d0, 2.0d0], spline2=spline2 &
    )
    msg = "matrix elements: spline1 size not valid, expected 4 but got 2"
    @assertExceptionRaised(msg)
  end subroutine test_add_element_invalid_spline1


  @test
  subroutine test_add_element_invalid_spline2()
    character(len=:), allocatable :: msg
    call set_name("elements: add element with invalid spline2")
    call elements%add( &
      1.0d0, loc1="t1", loc2="t1", spline1=spline1, spline2=[1.0d0, 2.0d0] &
    )
    call elements%add( &
      1.0d0, loc1="t3", loc2="t1", spline1=spline1, spline2=[1.0d0, 2.0d0, 1.0d0] &
    )
    msg = "matrix elements: spline2 size not valid, expected 2 but got 3"
    @assertExceptionRaised(msg)
  end subroutine test_add_element_invalid_spline2

end module mod_test_matrix_elements
