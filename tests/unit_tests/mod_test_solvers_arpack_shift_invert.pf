module mod_test_solvers_arpack_shift_invert
  use mod_suite_utils
  use funit
  use mod_arpack_type, only: arpack_t, new_arpack_config
  use mod_matrix_structure, only: matrix_t, new_matrix
  use mod_solvers, only: solve_evp
  implicit none

  type(matrix_t) :: amat
  type(matrix_t) :: bmat
  type(settings_t) :: settings
  complex(dp) :: vr(10, 10)
  integer, parameter :: nb_eigenvals = 4
  integer :: idxs(nb_eigenvals)
  complex(dp) :: actual(nb_eigenvals)
  complex(dp), parameter :: expected(10) = [ &
    (-0.7795557649951639d0, -0.3190570519782475d0), &
    (-0.40222728775310573d0, -0.1591345610324656d0), &
    (0.19978864304130092d0, -0.007120730856958498d0), &
    (0.2780763784935159d0, 1.0564177001188444d0), &
    (0.49119510716997966d0, 0.48905000276138166d0), &
    (0.5182657568800012d0, 0.7479373467358982d0), &
    (0.707950211215408d0, 0.8410713792802329d0), &
    (0.9836774139278549d0, 0.46713965558429804d0), &
    (1.4744682873098567d0, 1.7884905288463375d0), &
    (2.72570513179907d0, 3.60539530105732d0) &
  ]


contains

  @before
  subroutine init_test()
    call reset_globals()
    settings = get_settings()
    call settings%solvers%set_solver("arnoldi")
    call settings%solvers%set_arpack_mode("shift-invert")
    settings%solvers%number_of_eigenvalues = nb_eigenvals
    settings%solvers%maxiter = 500
    settings%solvers%which_eigenvalues = "LM"
    call create_matrices()
  end subroutine init_test

  @after
  subroutine tear_down()
    call amat%delete_matrix()
    call bmat%delete_matrix()
    call settings%delete()
  end subroutine tear_down


  subroutine create_matrices()
    use mod_transform_matrix, only: array_to_matrix
    integer :: i
    complex(dp) :: amat_array(10, 10), bmat_array(10, 10)

    amat_array = (0.0d0, 0.0d0)
    bmat_array = (0.0d0, 0.0d0)
    ! diagonals
    do i = 1, 10
      amat_array(i, i) = (1.0d0, 2.0d0) * i
      bmat_array(i, i) = (0.2d0, 2.3d0) * i
    end do
    ! diagonals 1
    do i = 1, 9
      amat_array(i + 1, i) = (1.5d0, 0.5d0) * i
      amat_array(i, i + 1) = -2.0d0 * i + (3.0d0, 5.0d0)
      bmat_array(i + 1, i) = cmplx(3.1d0, -2.5d0 * i, kind=dp)
      bmat_array(i, i + 1) = (6.0d0, -1.3d0) * i
    end do
    ! diagonals 2
    do i = 1, 8
      amat_array(i + 2, i) = cmplx(1.0d0, -2.5d0 * i, kind=dp)
      amat_array(i, i + 2) = (6.0d0, 1.5d0) * i
    end do
    ! diagonal 3
    do i = 1, 7
      amat_array(i + 3, i) = cmplx(0.3d0, 1.8d0 * i, kind=dp)
    end do

    amat = array_to_matrix(amat_array)
    bmat = array_to_matrix(bmat_array)
  end subroutine create_matrices


  @test
  subroutine test_arpack_shift_invert0()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = 0)")
    settings%solvers%sigma = (0.0d0, 0.0d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [1, 2, 3, 5]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert0


  @test
  subroutine test_arpack_shift_invert1()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = 1.0)")
    settings%solvers%sigma = (1.0d0, 0.0d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [3, 5, 6, 8]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert1


  @test
  subroutine test_arpack_shift_invert2()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = 0.5i)")
    settings%solvers%sigma = (0.0d0, 0.5d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [3, 4, 5, 6]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert2


  @test
  subroutine test_arpack_shift_invert3()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = -1 + 0.2i)")
    settings%solvers%sigma = (-1.0d0, 0.2d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [1, 2, 3, 5]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert3


  @test
  subroutine test_arpack_shift_invert4()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = -0.5 - 0.35i)")
    settings%solvers%sigma = (-0.5d0, -0.35d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [1, 2, 3, 5]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert4


  @test
  subroutine test_arpack_shift_invert5()
    integer :: i
    call set_name("solving EVP, arpack shift-invert (sigma = 10 + 2i)")
    settings%solvers%sigma = (10.0d0, 2.0d0)
    call solve_evp(amat, bmat, settings, actual, vr)
    call sort_complex_array(actual)
    idxs = [7, 8, 9, 10]
    do i = 1, nb_eigenvals
      @assertEqual(expected(idxs(i)), actual(i), tolerance=TOL)
    end do
  end subroutine test_arpack_shift_invert5

end module mod_test_solvers_arpack_shift_invert
