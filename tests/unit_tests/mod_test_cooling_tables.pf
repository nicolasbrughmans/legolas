module mod_test_cooling_tables
  use mod_suite_utils
  use funit
  use mod_cooling_curves
  use mod_function_utils, only: from_function

  use mod_data_jccorona
  use mod_data_dalgarno
  use mod_data_dalgarno2
  use mod_data_mlsolar
  use mod_data_spex
  use mod_data_colgan

  implicit none

  real(dp), allocatable :: expected(:)
  real(dp), allocatable :: actual(:)
  real(dp), allocatable :: xvals(:)
  real(dp), allocatable :: T0vals(:)
  type(settings_t) :: settings
  type(background_t) :: background
  type(physics_t) :: physics
  real(dp) :: unit_temperature, unit_lambdaT, unit_dlambdaT_dT


contains

  @before
  subroutine init_test()
    settings = get_settings()
    background = get_background()
    physics = get_physics(settings, background)
    call set_default_units(settings)
    unit_temperature = settings%units%get_unit_temperature()
    unit_lambdaT = settings%units%get_unit_lambdaT()
    unit_dlambdaT_dT = unit_lambdaT / unit_temperature

    call background%set_density_funcs(rho0_func=rho0_func)
    call background%set_temperature_funcs(T0_func=T0_func)
  end subroutine init_test


  @after
  subroutine teardown_test()
    if (allocated(expected)) deallocate(expected)
    if (allocated(actual)) deallocate(actual)
    if (allocated(T0vals)) deallocate(T0vals)
    if (allocated(xvals)) deallocate(xvals)
    call settings%delete()
    call background%delete()
    call physics%delete()
  end subroutine teardown_test


  subroutine set_cooling_curve(name)
    character(len=*), intent(in) :: name
    call settings%physics%enable_cooling(cooling_curve=name)
    call physics%heatloss%cooling%initialise()
  end subroutine set_cooling_curve


  subroutine allocate_arrays(pts)
    integer, intent(in) :: pts
    allocate(expected(pts))
    allocate(actual(pts))
    allocate(T0vals(pts))
    allocate(xvals(pts))
    xvals = linspace(0.0_dp, 5.0_dp, pts)
  end subroutine allocate_arrays


  real(dp) function rho0_func()
    rho0_func = 1.0_dp
  end function rho0_func


  real(dp) function T0_func(x)
    real(dp), intent(in) :: x
    integer :: idx
    idx = minloc(abs(xvals - x), dim=1)
    T0_func = T0vals(idx)
  end function T0_func


  function get_actual(func) result(actual_vals)
    procedure(real(dp)), pointer :: func
    real(dp) :: actual_vals(size(xvals))
    integer :: i

    do i = 1, size(xvals)
      actual_vals(i) = func(xvals(i))
    end do
  end function get_actual


  function get_dLdT() result(dLdT_vals)
    real(dp) :: dLdT_vals(size(xvals))
    dLdT_vals = physics%heatloss%get_dLdT(xvals)
  end function get_dLdT


  function get_dLdrho() result(dLdrho_vals)
    real(dp) :: dLdrho_vals(size(xvals))
    dLdrho_vals = physics%heatloss%get_dLdrho(xvals)
  end function get_dLdrho


  function get_brehmstrahlung_lambda(T0, Tvals, Lvals) result(lambdavals)
    real(dp), intent(in) :: T0(:)
    real(dp), intent(in) :: Tvals(:), Lvals(:)
    real(dp) :: Tmax, Lmax
    real(dp) :: lambdavals(size(T0))

    Tmax = 10.0d0 ** maxval(Tvals) / unit_temperature
    Lmax = 10.0d0 ** Lvals(size(Tvals)) / unit_lambdaT
    lambdavals = Lmax * sqrt(T0 / Tmax)
  end function get_brehmstrahlung_lambda


  function get_brehmstrahlung_dlambda(T0, Tvals, Lvals) result(dlambdavals)
    real(dp), intent(in) :: T0(:)
    real(dp), intent(in) :: Tvals(:), Lvals(:)
    real(dp) :: Tmax, Lmax
    real(dp) :: dlambdavals(size(T0))

    Tmax = 10.0d0 ** maxval(Tvals) / unit_temperature
    Lmax = 10.0d0 ** Lvals(size(Tvals)) / unit_lambdaT
    dlambdavals = 0.5d0 * Lmax / sqrt(T0 * Tmax)
  end function get_brehmstrahlung_dlambda


  function get_spex_dm_T_table()  result(Ttable)
    real(dp), allocatable :: Ttable(:)
    real(dp), allocatable :: dummy(:)
    call get_cooling_table("spex_dalgarno", Ttable, dummy)
    deallocate(dummy)
  end function get_spex_dm_T_table


  function get_spex_dm_L_table()  result(Ltable)
    real(dp), allocatable :: Ltable(:)
    real(dp), allocatable :: dummy(:)
    call get_cooling_table("spex_dalgarno", dummy, Ltable)
    deallocate(dummy)
  end function get_spex_dm_L_table


  function get_colgan_dm_T_table()  result(Ttable)
    real(dp), allocatable :: Ttable(:)
    real(dp), allocatable :: dummy(:)
    call get_cooling_table("colgan_dm", Ttable, dummy)
    deallocate(dummy)
  end function get_colgan_dm_T_table


  function get_colgan_dm_L_table()  result(Ltable)
    real(dp), allocatable :: Ltable(:)
    real(dp), allocatable :: dummy(:)
    call get_cooling_table("colgan_dm", dummy, Ltable)
    deallocate(dummy)
  end function get_colgan_dm_L_table


  @test
  subroutine test_cooling_curve_unknown()
    call set_name("cooling curve: unknown")
    call set_cooling_curve("unknown")
    @assertExceptionRaised("unknown cooling curve: unknown")
  end subroutine test_cooling_curve_unknown


  @test
  subroutine test_cooling_curve_jc_corona_below()
    call set_name("cooling curve: jc_corona (below Tmin)")
    call set_cooling_curve("jc_corona")
    call allocate_arrays(pts=100)
    T0vals = linspace(100.0d0, 3500.0d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_jc_corona_below


  @test
  subroutine test_cooling_curve_jc_corona_above()
    call set_name("cooling curve: jc_corona (above Tmax)")
    call set_cooling_curve("jc_corona")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d8, 1.0d9, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_jccorona, logL_jccorona)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_jccorona, logL_jccorona)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_jc_corona_above


  @test
  subroutine test_cooling_curve_jc_corona()
    call set_name("cooling curve: jc_corona")
    call set_cooling_curve("jc_corona")
    call allocate_arrays(pts=21)
    T0vals = 10.0_dp ** logT_jccorona(20:40) / unit_temperature
    expected = 10.0_dp ** logL_jccorona(20:40) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    ! approximately equal due to interpolation
    @assertEqual(expected, actual, tolerance=1.0d-1)
  end subroutine test_cooling_curve_jc_corona


  @test
  subroutine test_cooling_curve_dalgarno_below()
    call set_name("cooling curve: dalgarno (below Tmin)")
    call set_cooling_curve("dalgarno")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 95.0d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_dalgarno_below


  @test
  subroutine test_cooling_curve_dalgarno_above()
    call set_name("cooling curve: dalgarno (above Tmax)")
    call set_cooling_curve("dalgarno")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.1d9, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_dalgarno, logL_dalgarno)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_dalgarno, logL_dalgarno)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_dalgarno_above


  @test
  subroutine test_cooling_curve_dalgarno()
    call set_name("cooling curve: dalgarno")
    call set_cooling_curve("dalgarno")
    call allocate_arrays(pts=41)
    T0vals = 10.0d0 ** logT_dalgarno(20:60) / unit_temperature
    expected = 10.0d0 ** logL_dalgarno(20:60) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=2.0d-1)
  end subroutine test_cooling_curve_dalgarno


  @test
  subroutine test_cooling_curve_dalgarno2_below()
    call set_name("cooling curve: dalgarno2 (below Tmin)")
    call set_cooling_curve("dalgarno2")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 9.5d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_dalgarno2_below


  @test
  subroutine test_cooling_curve_dalgarno2_above()
    call set_name("cooling curve: dalgarno2 (above Tmax)")
    call set_cooling_curve("dalgarno2")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.1d9, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_dalgarno2, logL_dalgarno2)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_dalgarno2, logL_dalgarno2)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_dalgarno2_above


  @test
  subroutine test_cooling_curve_dalgarno2()
    call set_name("cooling curve: dalgarno2")
    call set_cooling_curve("dalgarno2")
    call allocate_arrays(pts=41)
    T0vals = 10.0d0 ** logT_dalgarno2(20:60) / unit_temperature
    expected = 10.0d0 ** logL_dalgarno2(20:60) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=2.0d-1)
  end subroutine test_cooling_curve_dalgarno2


  @test
  subroutine test_cooling_curve_ml_solar_below()
    call set_name("cooling curve: ml_solar (below Tmin)")
    call set_cooling_curve("ml_solar")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 95.0d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_ml_solar_below


  @test
  subroutine test_cooling_curve_ml_solar_above()
    call set_name("cooling curve: ml_solar (above Tmax)")
    call set_cooling_curve("ml_solar")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.1d9, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_mlsolar, logL_mlsolar)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_mlsolar, logL_mlsolar)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_ml_solar_above


  @test
  subroutine test_cooling_curve_ml_solar()
    call set_name("cooling curve: ml_solar")
    call set_cooling_curve("ml_solar")
    call allocate_arrays(pts=41)
    T0vals = 10.0d0 ** logT_mlsolar(20:60) / unit_temperature
    expected = 10.0_dp ** logL_mlsolar(20:60) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=2.0d-1)
  end subroutine test_cooling_curve_ml_solar


  @test
  subroutine test_cooling_curve_spex_below()
    call set_name("cooling curve: spex (below Tmin)")
    call set_cooling_curve("spex")
    call allocate_arrays(pts=100)
    T0vals = linspace(250.0d0, 5000.0d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_spex_below


  @test
  subroutine test_cooling_curve_spex_above()
    call set_name("cooling curve: spex (above Tmax)")
    call set_cooling_curve("spex")
    call allocate_arrays(pts=100)
    T0vals = linspace(5.0d8, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_spex, logL_spex)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_spex, logL_spex)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_spex_above


  @test
  subroutine test_cooling_curve_spex()
    call set_name("cooling curve: spex")
    call set_cooling_curve("spex")
    call allocate_arrays(pts=76)
    T0vals = 10.0d0 ** logT_spex(25:100) / unit_temperature
    expected = 10.0_dp ** logL_spex(25:100) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=1.0d-1)
  end subroutine test_cooling_curve_spex


  @test
  subroutine test_cooling_curve_spex_dalgarno_below()
    call set_name("cooling curve: spex_dalgarno (below Tmin)")
    call set_cooling_curve("spex_dalgarno")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 9.5d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_spex_dalgarno_below


  @test
  subroutine test_cooling_curve_spex_dalgarno_above()
    call set_name("cooling curve: spex_dalgarno (above Tmax)")
    call set_cooling_curve("spex_dalgarno")
    call allocate_arrays(pts=100)
    T0vals = linspace(5.0d8, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda( &
      T0vals, get_spex_dm_T_table(), get_spex_dm_L_table() &
    )
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda( &
      T0vals, get_spex_dm_T_table(), get_spex_dm_L_table() &
    )
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_spex_dalgarno_above


  @test
  subroutine test_cooling_curve_spex_dalgarno()
    real(dp), allocatable :: spex_dm_T_table(:)
    real(dp), allocatable :: spex_dm_L_table(:)

    call set_name("cooling curve: spex_dalgarno")
    call set_cooling_curve("spex_dalgarno")
    call allocate_arrays(pts=81)
    call get_cooling_table("spex_dalgarno", spex_dm_T_table, spex_dm_L_table)
    T0vals = 10.0d0 ** spex_dm_T_table(70:150) / unit_temperature
    expected = 10.0_dp ** spex_dm_L_table(70:150) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=2.0d-1)
  end subroutine test_cooling_curve_spex_dalgarno


  @test
  subroutine test_cooling_curve_colgan_below()
    call set_name("cooling curve: colgan (below Tmin)")
    call set_cooling_curve("colgan")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 95.0d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_colgan_below


  @test
  subroutine test_cooling_curve_colgan_above()
    call set_name("cooling curve: colgan (above Tmax)")
    call set_cooling_curve("colgan")
    call allocate_arrays(pts=100)
    T0vals = linspace(2.0d9, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda(T0vals, logT_colgan, logL_colgan)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda(T0vals, logT_colgan, logL_colgan)
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_colgan_above


  @test
  subroutine test_cooling_curve_colgan()
    call set_name("cooling curve: colgan")
    call set_cooling_curve("colgan")
    call allocate_arrays(pts=41)
    T0vals = 10.0d0 ** logT_colgan(10:50) / unit_temperature
    expected = 10.0d0 ** logL_colgan(10:50) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=2.0d-1)
  end subroutine test_cooling_curve_colgan


  @test
  subroutine test_cooling_curve_colgan_dm_below()
    call set_name("cooling curve: colgan_dm (below Tmin)")
    call set_cooling_curve("colgan_dm")
    call allocate_arrays(pts=100)
    T0vals = linspace(1.0d0, 9.5d0, 100) / unit_temperature
    expected = 0.0_dp
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_colgan_dm_below


  @test
  subroutine test_cooling_curve_colgan_dm_above()
    call set_name("cooling curve: colgan_dm (above Tmax)")
    call set_cooling_curve("colgan_dm")
    call allocate_arrays(pts=100)
    T0vals = linspace(2.0d9, 1.0d10, 100) / unit_temperature
    expected = get_brehmstrahlung_lambda( &
      T0vals, get_colgan_dm_T_table(), get_colgan_dm_L_table() &
    )
    actual = get_dLdrho()
    @assertEqual(expected, actual, tolerance=TOL)
    expected = get_brehmstrahlung_dlambda( &
      T0vals, get_colgan_dm_T_table(), get_colgan_dm_L_table() &
    )
    actual = get_dLdT()
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_cooling_curve_colgan_dm_above


  @test
  subroutine test_cooling_curve_colgan_dm()
    real(dp), allocatable :: colgan_dm_T_table(:)
    real(dp), allocatable :: colgan_dm_L_table(:)

    call set_name("cooling curve: colgan_dm")
    call set_cooling_curve("colgan_dm")
    call allocate_arrays(pts=91)
    call get_cooling_table("colgan_dm", colgan_dm_T_table, colgan_dm_L_table)
    T0vals = 10.0d0 ** colgan_dm_T_table(30:120) / unit_temperature
    expected = 10.0_dp ** colgan_dm_L_table(30:120) / unit_lambdaT
    actual = get_actual(physics%heatloss%cooling%lambdaT)
    @assertEqual(expected, actual, tolerance=3.5d-1)
  end subroutine test_cooling_curve_colgan_dm

end module mod_test_cooling_tables
