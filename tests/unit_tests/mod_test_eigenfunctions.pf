module mod_test_eigenfunctions
  use mod_suite_utils
  use funit
  use mod_eigenfunctions, only: eigenfunctions_t, new_eigenfunctions
  implicit none

  complex(dp) :: eigenvals(25)
  complex(dp), allocatable :: eigenvectors(:, :)
  type(settings_t) :: settings
  type(background_t) :: background
  type(grid_t) :: grid
  type(eigenfunctions_t) :: eigenfunctions

contains

  subroutine create_eigenvectors(matrixsize)
    integer, intent(in) :: matrixsize
    real(dp)  :: eigenvecs_real(matrixsize, size(eigenvals))
    real(dp)  :: eigenvecs_imag(matrixsize, size(eigenvals))

    allocate(eigenvectors(matrixsize, size(eigenvals)))

    call random_number(eigenvecs_real)
    call random_number(eigenvecs_imag)
    eigenvectors = cmplx(eigenvecs_real, eigenvecs_imag, kind=dp)
  end subroutine create_eigenvectors


  subroutine use_subset()
    settings%io%write_ef_subset = .true.
    settings%io%ef_subset_center = (2.0d0, 1.0d0)
    settings%io%ef_subset_radius = 1.1d0
  end subroutine use_subset


  subroutine use_bfield(use_b01)
    logical, intent(in)  :: use_b01

    if (use_b01) call background%set_magnetic_1_funcs(B01_func=unity)
    call background%set_magnetic_2_funcs(B02_func=unity)
    call background%set_magnetic_3_funcs(B03_func=two)
  end subroutine use_bfield


  real(dp) function unity()
    unity = 1.0d0
  end function unity

  real(dp) function two()
    two = 2.0d0
  end function two



  @before
  subroutine init_test()
    integer :: i, j, pos

    call reset_globals()
    settings = get_settings()
    background = get_background()
    grid = create_test_grid(settings, pts=20, geometry="Cartesian")
    eigenfunctions = new_eigenfunctions(settings, grid, background)
    ! creates a square grid between (-2, 2) and (2, -2)
    pos = 1
    do i = 2, -2, -1
      do j = -2, 2
        eigenvals(pos) = cmplx(j, i, kind=dp)
        pos = pos + 1
      end do
    end do
  end subroutine init_test


  @after
  subroutine teardown_test()
    call eigenfunctions%delete()
    call settings%delete()
    call grid%delete()
    if (allocated(eigenvectors)) deallocate(eigenvectors)
  end subroutine teardown_test


  @test
  subroutine test_select_all_eigenfunctions()
    integer :: actual_shape(2)

    call set_name("eigenfunctions - no subset")
    call eigenfunctions%initialise(eigenvals)
    actual_shape = shape(eigenfunctions%base_efs(1)%quantities)
    @assertEqual([settings%grid%get_ef_gridpts(), size(eigenvals)], actual_shape)
  end subroutine test_select_all_eigenfunctions


  @test
  subroutine test_select_eigenfunction_subset()
    integer :: actual_shape(2)

    call set_name("eigenfunctions - subset selection")
    call use_subset()
    call eigenfunctions%initialise(eigenvals)
    actual_shape = shape(eigenfunctions%base_efs(1)%quantities)
    @assertEqual([settings%grid%get_ef_gridpts(), 4], actual_shape)
  end subroutine test_select_eigenfunction_subset


  @test
  subroutine test_eigenfunction_subset_idxs()
    call set_name("eigenfunctions - subset indices")
    call use_subset()
    call eigenfunctions%initialise(eigenvals)
    @assertEqual(4, size(eigenfunctions%ef_written_idxs))
    @assertEqual([5, 9, 10, 15], eigenfunctions%ef_written_idxs)
  end subroutine test_eigenfunction_subset_idxs


  @test
  subroutine test_ef_names_derived_mhd()
    call set_name("eigenfunctions - derived state vector (mhd)")
    settings%io%write_derived_eigenfunctions = .true.
    call eigenfunctions%initialise(eigenvals)
    @assertEqual(12, size(settings%get_derived_state_vector()))
  end subroutine test_ef_names_derived_mhd


  @test
  subroutine test_ef_names_derived_hd()
    call set_name("eigenfunctions - derived state vector (hd)")
    settings%io%write_derived_eigenfunctions = .true.
    call settings%set_state_vector(physics_type="hd")
    call eigenfunctions%initialise(eigenvals)
    @assertEqual(5, size(settings%get_derived_state_vector()))
  end subroutine test_ef_names_derived_hd

  @test
  subroutine test_ef_names_derived_with_bfield()
    call set_name("eigenfunctions - derived state vector (without B01)")
    settings%io%write_derived_eigenfunctions = .true.
    call use_bfield(use_b01=.false.)
    call eigenfunctions%initialise(eigenvals)
    @assertEqual(20, size(settings%get_derived_state_vector()))
  end subroutine test_ef_names_derived_with_bfield

  @test
  subroutine test_ef_names_derived_with_b01_field()
    call set_name("eigenfunctions - derived state vector (with B01)")
    call logger%set_logging_level(0)
    settings%io%write_derived_eigenfunctions = .true.
    call use_bfield(use_b01=.true.)
    call eigenfunctions%initialise(eigenvals)
    @assertEqual(12, size(settings%get_derived_state_vector()))
  end subroutine test_ef_names_derived_with_b01_field


  @test
  subroutine test_eigenfunction_assembly_hd()
    call set_name("eigenfunctions - assembly hd")
    call settings%set_state_vector(physics_type="hd")
    settings%io%write_derived_eigenfunctions = .true.
    call eigenfunctions%initialise(eigenvals)
    call create_eigenvectors(settings%dims%get_dim_matrix())
    call eigenfunctions%assemble(eigenvectors)
    @assertTrue(allocated(eigenfunctions%base_efs))
    @assertTrue(allocated(eigenfunctions%derived_efs))
    @assertEqual(5, size(eigenfunctions%base_efs))
    @assertEqual(5, size(eigenfunctions%derived_efs))
  end subroutine test_eigenfunction_assembly_hd


  @test
  subroutine test_eigenfunction_assembly_mhd()
    call set_name("eigenfunctions - assembly mhd")
    settings%io%write_derived_eigenfunctions = .true.
    call eigenfunctions%initialise(eigenvals)
    call create_eigenvectors(settings%dims%get_dim_matrix())
    call eigenfunctions%assemble(eigenvectors)
    @assertTrue(allocated(eigenfunctions%base_efs))
    @assertTrue(allocated(eigenfunctions%derived_efs))
    @assertEqual(8, size(eigenfunctions%base_efs))
    @assertEqual(12, size(eigenfunctions%derived_efs))
  end subroutine test_eigenfunction_assembly_mhd
end module mod_test_eigenfunctions
