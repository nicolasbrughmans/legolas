module mod_test_eigenfunctions
  use mod_suite_utils
  use funit
  use mod_eigenfunctions
  use mod_global_variables
  use mod_types, only: ef_type
  use mod_settings, only: settings_t
  implicit none

  complex(dp) :: eigenvals(25)
  complex(dp), allocatable :: eigenvectors(:, :)
  type(ef_type) :: ef_test
  type(settings_t) :: settings

contains

  subroutine create_eigenvectors(matrixsize)
    integer, intent(in) :: matrixsize
    real(dp)  :: eigenvecs_real(matrixsize, size(eigenvals))
    real(dp)  :: eigenvecs_imag(matrixsize, size(eigenvals))

    allocate(eigenvectors(matrixsize, size(eigenvals)))

    call random_number(eigenvecs_real)
    call random_number(eigenvecs_imag)
    eigenvectors = cmplx(eigenvecs_real, eigenvecs_imag, kind=dp)
  end subroutine create_eigenvectors


  subroutine use_subset()
    write_eigenfunction_subset = .true.
    eigenfunction_subset_center = (2.0d0, 1.0d0)
    eigenfunction_subset_radius = 1.1d0
  end subroutine use_subset


  subroutine use_bfield(use_b01)
    use mod_equilibrium, only: B_field

    logical, intent(in)  :: use_b01

    call eigenfunctions_clean()
    if (use_b01) then
      B_field % B01 = 1.0d0
    end if
    B_field % B02 = 1.0d0
    B_field % B03 = 2.0d0
    call initialise_eigenfunctions( &
      omega=eigenvals, state_vector=settings%get_state_vector() &
    )
  end subroutine use_bfield


  subroutine enable_derived_efs()
    write_derived_eigenfunctions = .true.
    call eigenfunctions_clean()
    call initialise_eigenfunctions( &
      omega=eigenvals, state_vector=settings%get_state_vector() &
    )
  end subroutine enable_derived_efs


  @before
  subroutine init_test()
    integer :: i, j, pos

    call reset_globals()
    call reset_fields(init_fields=.true.)
    settings = create_settings(physics_type="mhd")
    call settings%dims%set_dim_matrix(gridpts=20)
    call create_test_grid(pts=20, geom='Cartesian')
    ! creates a square grid between (-2, 2) and (2, -2)
    pos = 1
    do i = 2, -2, -1
      do j = -2, 2
        eigenvals(pos) = cmplx(j, i, kind=dp)
        pos = pos + 1
      end do
    end do
    call initialise_eigenfunctions( &
      omega=eigenvals, state_vector=settings%get_state_vector() &
    )
  end subroutine init_test


  @after
  subroutine teardown_test()
    call clean_up()
    call settings%delete()
    if (allocated(eigenvectors)) then
      deallocate(eigenvectors)
    end if
    call eigenfunctions_clean()
  end subroutine teardown_test


  @test
  subroutine test_select_all_eigenfunctions()
    integer :: actual_shape(2)

    call set_name("eigenfunctions - no subset")
    actual_shape = shape(base_eigenfunctions(1)%quantities)
    @assertEqual([ef_gridpts, size(eigenvals)], actual_shape)
  end subroutine test_select_all_eigenfunctions


  @test
  subroutine test_select_eigenfunction_subset()
    integer :: actual_shape(2)

    call set_name("eigenfunctions - subset selection")
    call use_subset()
    call eigenfunctions_clean()
    call initialise_eigenfunctions( &
      omega=eigenvals, state_vector=settings%get_state_vector() &
    )
    actual_shape = shape(base_eigenfunctions(1)%quantities)
    @assertEqual([ef_gridpts, 4], actual_shape)
  end subroutine test_select_eigenfunction_subset


  @test
  subroutine test_eigenfunction_subset_idxs()
    call set_name("eigenfunctions - subset indices")
    call use_subset()
    call eigenfunctions_clean()
    call initialise_eigenfunctions( &
      omega=eigenvals, state_vector=settings%get_state_vector() &
    )
    @assertEqual(4, size(ef_written_idxs))
    @assertEqual([5, 9, 10, 15], ef_written_idxs)
  end subroutine test_eigenfunction_subset_idxs


  @test
  subroutine test_ef_names_derived_no_bfield()
    call set_name("eigenfunctions - derived names (hydro)")
    call enable_derived_efs()
    @assertEqual(12, size(derived_ef_names))
    @assertTrue(.not. any(derived_ef_names == "B_para"))
  end subroutine test_ef_names_derived_no_bfield


  @test
  subroutine test_ef_names_derived_with_b01_field()
    call set_name("eigenfunctions - derived names (with B01)")
    logging_level = 0
    call enable_derived_efs()
    call use_bfield(use_b01=.true.)
    @assertEqual(12, size(derived_ef_names))
  end subroutine test_ef_names_derived_with_b01_field


  @test
  subroutine test_ef_names_derived_with_bfield()
    call set_name("eigenfunctions - derived names (without B01)")
    call enable_derived_efs()
    call use_bfield(use_b01=.false.)
    @assertEqual(20, size(derived_ef_names))
  end subroutine test_ef_names_derived_with_bfield


  @test
  subroutine test_ef_retrieval_invalid_name()
    call set_name("eigenfunctions - get from name (invalid)")
    ef_test = retrieve_eigenfunctions( &
      name="unknown", state_vector=settings%get_state_vector() &
    )
    @assertExceptionRaised("could not retrieve eigenfunction with name unknown")
  end subroutine test_ef_retrieval_invalid_name


  @test
  subroutine test_ef_retrieval_base_ef()
    call set_name("eigenfunctions - get from name (base ef)")
    ef_test = retrieve_eigenfunctions( &
      name="rho", state_vector=settings%get_state_vector() &
    )
  end subroutine test_ef_retrieval_base_ef


  @test
  subroutine test_ef_retrieval_no_derived_efs()
    call set_name("eigenfunctions - get from name (no derived present)")
    ef_test = retrieve_eigenfunctions( &
      name="S", state_vector=settings%get_state_vector() &
    )
    @assertExceptionRaised("could not retrieve eigenfunction with name S")
  end subroutine test_ef_retrieval_no_derived_efs


  @test
  subroutine test_ef_retrieval_derived_efs()
    call set_name("eigenfunctions - get from name (derived)")
    call enable_derived_efs()
    ef_test = retrieve_eigenfunctions( &
      name="S", state_vector=settings%get_state_vector() &
    )
  end subroutine test_ef_retrieval_derived_efs


  @test
  subroutine test_ef_retrieval_index()
    complex(dp) :: eigenfunc(ef_gridpts)

    call set_name("eigenfunctions - get from index")
    call create_eigenvectors(settings%dims%get_dim_matrix())
    call calculate_eigenfunctions( &
      right_eigenvectors=eigenvectors, &
      state_vector=settings%get_state_vector(), &
      dims=settings%dims &
    )
    eigenfunc = retrieve_eigenfunction_from_index( &
      name="rho", ef_index=5, state_vector=settings%get_state_vector() &
    )
  end subroutine test_ef_retrieval_index


  @test
  subroutine test_ef_retrieval_index_derived_ef()
    complex(dp) :: eigenfunc(ef_gridpts)

    call set_name("eigenfunctions - get from index (invalid name)")
    call enable_derived_efs()
    call create_eigenvectors(settings%dims%get_dim_matrix())
    call calculate_eigenfunctions( &
      right_eigenvectors=eigenvectors, &
      state_vector=settings%get_state_vector(), &
      dims=settings%dims &
    )
    eigenfunc = retrieve_eigenfunction_from_index( &
      name="S", ef_index=5, state_vector=settings%get_state_vector() &
    )
  end subroutine test_ef_retrieval_index_derived_ef


  @test
  subroutine test_eigenfunctions_pp_nonzero_B01()
    integer :: size_names_default

    logging_level = 0
    call set_name("eigenfunctions - pp nonzero B01")
    call enable_derived_efs()
    size_names_default = size(derived_ef_names)
    call use_bfield(use_b01=.true.)
    @assertEqual(size_names_default, size(derived_ef_names))
  end subroutine test_eigenfunctions_pp_nonzero_B01


  @test
  subroutine test_eigenfunctions_pp_with_bfield()
    integer :: size_names_default

    call set_name("eigenfunctions - pp names with bfield")
    call enable_derived_efs()
    size_names_default = size(derived_ef_names)
    call use_bfield(use_b01=.false.)
    @assertEqual(size_names_default + 8, size(derived_ef_names))
  end subroutine test_eigenfunctions_pp_with_bfield


  @test
  subroutine test_eigenfunction_calculations_with_bfield()
    call set_name("eigenfunctions - pp sizes with bfield")
    call enable_derived_efs()
    call use_bfield(use_b01=.false.)
    call create_eigenvectors(settings%dims%get_dim_matrix())
    call calculate_eigenfunctions( &
      right_eigenvectors=eigenvectors, &
      state_vector=settings%get_state_vector(), &
      dims=settings%dims &
    )
    @assertEqual(size(derived_ef_names), size(derived_eigenfunctions))
    @assertTrue((any(derived_ef_names == "B_para")))
  end subroutine test_eigenfunction_calculations_with_bfield
end module mod_test_eigenfunctions
